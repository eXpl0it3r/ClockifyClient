// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// time entry
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TimeEntryDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents approval request identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovalRequestId { get; set; }
#nullable restore
#else
        public string ApprovalRequestId { get; set; }
#endif
        /// <summary>Indicates whether the time entry is billable</summary>
        public bool? Billable { get; set; }
        /// <summary>Represents client identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>Represents client name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientName { get; set; }
#nullable restore
#else
        public string ClientName { get; set; }
#endif
        /// <summary>Represents time entry description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Represents time entry identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GetId { get; set; }
#nullable restore
#else
        public string GetId { get; set; }
#endif
        /// <summary>The locked property</summary>
        public bool? Locked { get; set; }
        /// <summary>Represents project color</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectColor { get; set; }
#nullable restore
#else
        public string ProjectColor { get; set; }
#endif
        /// <summary>Represents project identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>Represents project name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectName { get; set; }
#nullable restore
#else
        public string ProjectName { get; set; }
#endif
        /// <summary>List of tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.ReportTagDto>? Tags { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.ReportTagDto> Tags { get; set; }
#endif
        /// <summary>Represents task identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskId { get; set; }
#nullable restore
#else
        public string TaskId { get; set; }
#endif
        /// <summary>Represents task name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskName { get; set; }
#nullable restore
#else
        public string TaskName { get; set; }
#endif
        /// <summary>Represents time interval</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ReportTimeIntervalDto? TimeInterval { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ReportTimeIntervalDto TimeInterval { get; set; }
#endif
        /// <summary>Represents user email.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserEmail { get; set; }
#nullable restore
#else
        public string UserEmail { get; set; }
#endif
        /// <summary>Represents user identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Represents user&apos;s name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.TimeEntryDto"/> and sets the default values.
        /// </summary>
        public TimeEntryDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeEntryDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.TimeEntryDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.TimeEntryDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "approvalRequestId", n => { ApprovalRequestId = n.GetStringValue(); } },
                { "billable", n => { Billable = n.GetBoolValue(); } },
                { "clientId", n => { ClientId = n.GetStringValue(); } },
                { "clientName", n => { ClientName = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "get_id", n => { GetId = n.GetStringValue(); } },
                { "locked", n => { Locked = n.GetBoolValue(); } },
                { "projectColor", n => { ProjectColor = n.GetStringValue(); } },
                { "projectId", n => { ProjectId = n.GetStringValue(); } },
                { "projectName", n => { ProjectName = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.ReportTagDto>(global::ClockifyClient.Models.ReportTagDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "taskId", n => { TaskId = n.GetStringValue(); } },
                { "taskName", n => { TaskName = n.GetStringValue(); } },
                { "timeInterval", n => { TimeInterval = n.GetObjectValue<global::ClockifyClient.Models.ReportTimeIntervalDto>(global::ClockifyClient.Models.ReportTimeIntervalDto.CreateFromDiscriminatorValue); } },
                { "userEmail", n => { UserEmail = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("approvalRequestId", ApprovalRequestId);
            writer.WriteBoolValue("billable", Billable);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("clientName", ClientName);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("get_id", GetId);
            writer.WriteBoolValue("locked", Locked);
            writer.WriteStringValue("projectColor", ProjectColor);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteStringValue("projectName", ProjectName);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.ReportTagDto>("tags", Tags);
            writer.WriteStringValue("taskId", TaskId);
            writer.WriteStringValue("taskName", TaskName);
            writer.WriteObjectValue<global::ClockifyClient.Models.ReportTimeIntervalDto>("timeInterval", TimeInterval);
            writer.WriteStringValue("userEmail", UserEmail);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userName", UserName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
