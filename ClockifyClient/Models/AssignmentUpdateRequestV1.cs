// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AssignmentUpdateRequestV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether assignment is billable or not.</summary>
        public bool? Billable { get; set; }
        /// <summary>Represents end date in yyyy-MM-ddThh:mm:ssZ format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? End { get; set; }
#nullable restore
#else
        public string End { get; set; }
#endif
        /// <summary>Represents assignment total hours per day.</summary>
        public double? HoursPerDay { get; set; }
        /// <summary>Indicates whether to include non-working days or not.</summary>
        public bool? IncludeNonWorkingDays { get; set; }
        /// <summary>Represents assignment note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>Valid series option</summary>
        public global::ClockifyClient.Models.AssignmentUpdateRequestV1_seriesUpdateOption? SeriesUpdateOption { get; set; }
        /// <summary>Represents start date in yyyy-MM-ddThh:mm:ssZ format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Start { get; set; }
#nullable restore
#else
        public string Start { get; set; }
#endif
        /// <summary>Represents start time in hh:mm:ss format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartTime { get; set; }
#nullable restore
#else
        public string StartTime { get; set; }
#endif
        /// <summary>Represents task identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskId { get; set; }
#nullable restore
#else
        public string TaskId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.AssignmentUpdateRequestV1"/> and sets the default values.
        /// </summary>
        public AssignmentUpdateRequestV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.AssignmentUpdateRequestV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.AssignmentUpdateRequestV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.AssignmentUpdateRequestV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billable", n => { Billable = n.GetBoolValue(); } },
                { "end", n => { End = n.GetStringValue(); } },
                { "hoursPerDay", n => { HoursPerDay = n.GetDoubleValue(); } },
                { "includeNonWorkingDays", n => { IncludeNonWorkingDays = n.GetBoolValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "seriesUpdateOption", n => { SeriesUpdateOption = n.GetEnumValue<global::ClockifyClient.Models.AssignmentUpdateRequestV1_seriesUpdateOption>(); } },
                { "start", n => { Start = n.GetStringValue(); } },
                { "startTime", n => { StartTime = n.GetStringValue(); } },
                { "taskId", n => { TaskId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("billable", Billable);
            writer.WriteStringValue("end", End);
            writer.WriteDoubleValue("hoursPerDay", HoursPerDay);
            writer.WriteBoolValue("includeNonWorkingDays", IncludeNonWorkingDays);
            writer.WriteStringValue("note", Note);
            writer.WriteEnumValue<global::ClockifyClient.Models.AssignmentUpdateRequestV1_seriesUpdateOption>("seriesUpdateOption", SeriesUpdateOption);
            writer.WriteStringValue("start", Start);
            writer.WriteStringValue("startTime", StartTime);
            writer.WriteStringValue("taskId", TaskId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
