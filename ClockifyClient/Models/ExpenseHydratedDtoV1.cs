// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represent a list of hydrated expense objects.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ExpenseHydratedDtoV1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether expense is billable or not.</summary>
        public bool? Billable { get; set; }
        /// <summary>Represents expense category object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ExpenseCategoryDto? Category { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ExpenseCategoryDto Category { get; set; }
#endif
        /// <summary>Represents a date in yyyy-MM-dd format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>Represents file identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileId { get; set; }
#nullable restore
#else
        public string FileId { get; set; }
#endif
        /// <summary>Represents file name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>Represents expense identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The isLocked property</summary>
        public bool? IsLocked { get; set; }
        /// <summary>The locked property</summary>
        public bool? Locked { get; set; }
        /// <summary>Represents notes for an expense.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Represents project info object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ProjectInfoDto? Project { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ProjectInfoDto Project { get; set; }
#endif
        /// <summary>Represents expense quantity as double data type.</summary>
        public double? Quantity { get; set; }
        /// <summary>Represents task info object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TaskInfoDto? Task { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TaskInfoDto Task { get; set; }
#endif
        /// <summary>Represents expense total as double data type.</summary>
        public double? Total { get; set; }
        /// <summary>Represents user identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Represents workspace identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkspaceId { get; set; }
#nullable restore
#else
        public string WorkspaceId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.ExpenseHydratedDtoV1"/> and sets the default values.
        /// </summary>
        public ExpenseHydratedDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.ExpenseHydratedDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.ExpenseHydratedDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.ExpenseHydratedDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billable", n => { Billable = n.GetBoolValue(); } },
                { "category", n => { Category = n.GetObjectValue<global::ClockifyClient.Models.ExpenseCategoryDto>(global::ClockifyClient.Models.ExpenseCategoryDto.CreateFromDiscriminatorValue); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "fileId", n => { FileId = n.GetStringValue(); } },
                { "fileName", n => { FileName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "isLocked", n => { IsLocked = n.GetBoolValue(); } },
                { "locked", n => { Locked = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "project", n => { Project = n.GetObjectValue<global::ClockifyClient.Models.ProjectInfoDto>(global::ClockifyClient.Models.ProjectInfoDto.CreateFromDiscriminatorValue); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "task", n => { Task = n.GetObjectValue<global::ClockifyClient.Models.TaskInfoDto>(global::ClockifyClient.Models.TaskInfoDto.CreateFromDiscriminatorValue); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "workspaceId", n => { WorkspaceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("billable", Billable);
            writer.WriteObjectValue<global::ClockifyClient.Models.ExpenseCategoryDto>("category", Category);
            writer.WriteStringValue("date", Date);
            writer.WriteStringValue("fileId", FileId);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isLocked", IsLocked);
            writer.WriteBoolValue("locked", Locked);
            writer.WriteStringValue("notes", Notes);
            writer.WriteObjectValue<global::ClockifyClient.Models.ProjectInfoDto>("project", Project);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteObjectValue<global::ClockifyClient.Models.TaskInfoDto>("task", Task);
            writer.WriteDoubleValue("total", Total);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("workspaceId", WorkspaceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
