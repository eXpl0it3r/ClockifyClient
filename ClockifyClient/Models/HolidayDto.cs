// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class HolidayDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents automatic time entry creation settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.AutomaticTimeEntryCreationDto? AutomaticTimeEntryCreation { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.AutomaticTimeEntryCreationDto AutomaticTimeEntryCreation { get; set; }
#endif
        /// <summary>Provide color in format ^#(?:[0-9a-fA-F]{6}){1}$. Explanation: A valid color code should start with &apos;#&apos; and consist of six hexadecimal characters, representing a color in hexadecimal format. Color value is in standard RGB hexadecimal format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>Represents startDate and endDate of the holiday. Date is in format yyyy-mm-dd</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.DatePeriod? DatePeriod { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.DatePeriod DatePeriod { get; set; }
#endif
        /// <summary>Indicates whether the holiday is shown to new users.</summary>
        public bool? EveryoneIncludingNew { get; set; }
        /// <summary>Represents holiday identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represents the name of the holiday.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Indicates whether the holiday occurs annually.</summary>
        public bool? OccursAnnually { get; set; }
        /// <summary>Indicates which user groups are included.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UserGroupIds { get; set; }
#nullable restore
#else
        public List<string> UserGroupIds { get; set; }
#endif
        /// <summary>Indicates which users are included.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UserIds { get; set; }
#nullable restore
#else
        public List<string> UserIds { get; set; }
#endif
        /// <summary>Represents workspace identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkspaceId { get; set; }
#nullable restore
#else
        public string WorkspaceId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.HolidayDto"/> and sets the default values.
        /// </summary>
        public HolidayDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.HolidayDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.HolidayDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.HolidayDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "automaticTimeEntryCreation", n => { AutomaticTimeEntryCreation = n.GetObjectValue<global::ClockifyClient.Models.AutomaticTimeEntryCreationDto>(global::ClockifyClient.Models.AutomaticTimeEntryCreationDto.CreateFromDiscriminatorValue); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "datePeriod", n => { DatePeriod = n.GetObjectValue<global::ClockifyClient.Models.DatePeriod>(global::ClockifyClient.Models.DatePeriod.CreateFromDiscriminatorValue); } },
                { "everyoneIncludingNew", n => { EveryoneIncludingNew = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "occursAnnually", n => { OccursAnnually = n.GetBoolValue(); } },
                { "userGroupIds", n => { UserGroupIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "userIds", n => { UserIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "workspaceId", n => { WorkspaceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ClockifyClient.Models.AutomaticTimeEntryCreationDto>("automaticTimeEntryCreation", AutomaticTimeEntryCreation);
            writer.WriteStringValue("color", Color);
            writer.WriteObjectValue<global::ClockifyClient.Models.DatePeriod>("datePeriod", DatePeriod);
            writer.WriteBoolValue("everyoneIncludingNew", EveryoneIncludingNew);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("occursAnnually", OccursAnnually);
            writer.WriteCollectionOfPrimitiveValues<string>("userGroupIds", UserGroupIds);
            writer.WriteCollectionOfPrimitiveValues<string>("userIds", UserIds);
            writer.WriteStringValue("workspaceId", WorkspaceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
