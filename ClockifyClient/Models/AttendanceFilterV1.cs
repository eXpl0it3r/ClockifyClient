// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represents attendance report filter.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AttendanceFilterV1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The breakFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CompareBreakFilter>? BreakFilters { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CompareBreakFilter> BreakFilters { get; set; }
#endif
        /// <summary>The capacityFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CompareCapacityFilter>? CapacityFilters { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CompareCapacityFilter> CapacityFilters { get; set; }
#endif
        /// <summary>The endFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CompareEndFilter>? EndFilters { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CompareEndFilter> EndFilters { get; set; }
#endif
        /// <summary>If set to true, report will include time off hours.</summary>
        public bool? HasTimeOff { get; set; }
        /// <summary>The overtimeFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CompareOvertimeFilter>? OvertimeFilters { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CompareOvertimeFilter> OvertimeFilters { get; set; }
#endif
        /// <summary>Specifies page number.</summary>
        public int? Page { get; set; }
        /// <summary>Specifies page size.</summary>
        public int? PageSize { get; set; }
        /// <summary>The sortColumn property</summary>
        public global::ClockifyClient.Models.AttendanceFilterV1_sortColumn? SortColumn { get; set; }
        /// <summary>The startFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CompareStartFilter>? StartFilters { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CompareStartFilter> StartFilters { get; set; }
#endif
        /// <summary>The workFilters property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CompareWorkFilter>? WorkFilters { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CompareWorkFilter> WorkFilters { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.AttendanceFilterV1"/> and sets the default values.
        /// </summary>
        public AttendanceFilterV1()
        {
            AdditionalData = new Dictionary<string, object>();
            SortColumn = global::ClockifyClient.Models.AttendanceFilterV1_sortColumn.NAME;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.AttendanceFilterV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.AttendanceFilterV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.AttendanceFilterV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "breakFilters", n => { BreakFilters = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CompareBreakFilter>(global::ClockifyClient.Models.CompareBreakFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "capacityFilters", n => { CapacityFilters = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CompareCapacityFilter>(global::ClockifyClient.Models.CompareCapacityFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "endFilters", n => { EndFilters = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CompareEndFilter>(global::ClockifyClient.Models.CompareEndFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "hasTimeOff", n => { HasTimeOff = n.GetBoolValue(); } },
                { "overtimeFilters", n => { OvertimeFilters = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CompareOvertimeFilter>(global::ClockifyClient.Models.CompareOvertimeFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "page", n => { Page = n.GetIntValue(); } },
                { "pageSize", n => { PageSize = n.GetIntValue(); } },
                { "sortColumn", n => { SortColumn = n.GetEnumValue<global::ClockifyClient.Models.AttendanceFilterV1_sortColumn>(); } },
                { "startFilters", n => { StartFilters = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CompareStartFilter>(global::ClockifyClient.Models.CompareStartFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "workFilters", n => { WorkFilters = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CompareWorkFilter>(global::ClockifyClient.Models.CompareWorkFilter.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CompareBreakFilter>("breakFilters", BreakFilters);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CompareCapacityFilter>("capacityFilters", CapacityFilters);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CompareEndFilter>("endFilters", EndFilters);
            writer.WriteBoolValue("hasTimeOff", HasTimeOff);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CompareOvertimeFilter>("overtimeFilters", OvertimeFilters);
            writer.WriteIntValue("page", Page);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteEnumValue<global::ClockifyClient.Models.AttendanceFilterV1_sortColumn>("sortColumn", SortColumn);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CompareStartFilter>("startFilters", StartFilters);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CompareWorkFilter>("workFilters", WorkFilters);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
