// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// List of summary report charts
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SummaryReportChartDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents how much is earned</summary>
        public double? Earned { get; set; }
        /// <summary>Represents summary report identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represents total amount</summary>
        public double? TotalAmount { get; set; }
        /// <summary>Represents total billable time</summary>
        public double? TotalBillableTime { get; set; }
        /// <summary>Represents total time</summary>
        public double? TotalTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.SummaryReportChartDto"/> and sets the default values.
        /// </summary>
        public SummaryReportChartDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.SummaryReportChartDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.SummaryReportChartDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.SummaryReportChartDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "earned", n => { Earned = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "totalAmount", n => { TotalAmount = n.GetDoubleValue(); } },
                { "totalBillableTime", n => { TotalBillableTime = n.GetDoubleValue(); } },
                { "totalTime", n => { TotalTime = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("earned", Earned);
            writer.WriteStringValue("id", Id);
            writer.WriteDoubleValue("totalAmount", TotalAmount);
            writer.WriteDoubleValue("totalBillableTime", TotalBillableTime);
            writer.WriteDoubleValue("totalTime", TotalTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
