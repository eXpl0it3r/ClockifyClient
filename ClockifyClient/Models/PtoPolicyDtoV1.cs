// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PtoPolicyDtoV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether the half day is allowed.</summary>
        public bool? AllowHalfDay { get; set; }
        /// <summary>Indicates whether the negative balance is allowed.</summary>
        public bool? AllowNegativeBalance { get; set; }
        /// <summary>Provide approval settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.Approve? Approve { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.Approve Approve { get; set; }
#endif
        /// <summary>Indicates whether the policy is archived.</summary>
        public bool? Archived { get; set; }
        /// <summary>Represents automatic approval settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.AutomaticAccrual? AutomaticAccrual { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.AutomaticAccrual AutomaticAccrual { get; set; }
#endif
        /// <summary>Represents automatic time entry creation settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.AutomaticTimeEntryCreation? AutomaticTimeEntryCreation { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.AutomaticTimeEntryCreation AutomaticTimeEntryCreation { get; set; }
#endif
        /// <summary>Indicates whether the policy is applied to future new users.</summary>
        public bool? EveryoneIncludingNew { get; set; }
        /// <summary>Represents policy identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represents the name of the policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Represents the data about negative balance including amount, time unit and period.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.NegativeBalance? NegativeBalance { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.NegativeBalance NegativeBalance { get; set; }
#endif
        /// <summary>Represents project identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>Represents the time unit of the policy.</summary>
        public global::ClockifyClient.Models.PtoPolicyDtoV1_timeUnit? TimeUnit { get; set; }
        /// <summary>Represents user groups&apos; identifiers across the system. Indicates which user groups are included in the policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UserGroupIds { get; set; }
#nullable restore
#else
        public List<string> UserGroupIds { get; set; }
#endif
        /// <summary>Represents users&apos; identifiers across the system. Indicates which users are included in the policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UserIds { get; set; }
#nullable restore
#else
        public List<string> UserIds { get; set; }
#endif
        /// <summary>Represents workspace identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkspaceId { get; set; }
#nullable restore
#else
        public string WorkspaceId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.PtoPolicyDtoV1"/> and sets the default values.
        /// </summary>
        public PtoPolicyDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.PtoPolicyDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.PtoPolicyDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.PtoPolicyDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allowHalfDay", n => { AllowHalfDay = n.GetBoolValue(); } },
                { "allowNegativeBalance", n => { AllowNegativeBalance = n.GetBoolValue(); } },
                { "approve", n => { Approve = n.GetObjectValue<global::ClockifyClient.Models.Approve>(global::ClockifyClient.Models.Approve.CreateFromDiscriminatorValue); } },
                { "archived", n => { Archived = n.GetBoolValue(); } },
                { "automaticAccrual", n => { AutomaticAccrual = n.GetObjectValue<global::ClockifyClient.Models.AutomaticAccrual>(global::ClockifyClient.Models.AutomaticAccrual.CreateFromDiscriminatorValue); } },
                { "automaticTimeEntryCreation", n => { AutomaticTimeEntryCreation = n.GetObjectValue<global::ClockifyClient.Models.AutomaticTimeEntryCreation>(global::ClockifyClient.Models.AutomaticTimeEntryCreation.CreateFromDiscriminatorValue); } },
                { "everyoneIncludingNew", n => { EveryoneIncludingNew = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "negativeBalance", n => { NegativeBalance = n.GetObjectValue<global::ClockifyClient.Models.NegativeBalance>(global::ClockifyClient.Models.NegativeBalance.CreateFromDiscriminatorValue); } },
                { "projectId", n => { ProjectId = n.GetStringValue(); } },
                { "timeUnit", n => { TimeUnit = n.GetEnumValue<global::ClockifyClient.Models.PtoPolicyDtoV1_timeUnit>(); } },
                { "userGroupIds", n => { UserGroupIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "userIds", n => { UserIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "workspaceId", n => { WorkspaceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allowHalfDay", AllowHalfDay);
            writer.WriteBoolValue("allowNegativeBalance", AllowNegativeBalance);
            writer.WriteObjectValue<global::ClockifyClient.Models.Approve>("approve", Approve);
            writer.WriteBoolValue("archived", Archived);
            writer.WriteObjectValue<global::ClockifyClient.Models.AutomaticAccrual>("automaticAccrual", AutomaticAccrual);
            writer.WriteObjectValue<global::ClockifyClient.Models.AutomaticTimeEntryCreation>("automaticTimeEntryCreation", AutomaticTimeEntryCreation);
            writer.WriteBoolValue("everyoneIncludingNew", EveryoneIncludingNew);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<global::ClockifyClient.Models.NegativeBalance>("negativeBalance", NegativeBalance);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteEnumValue<global::ClockifyClient.Models.PtoPolicyDtoV1_timeUnit>("timeUnit", TimeUnit);
            writer.WriteCollectionOfPrimitiveValues<string>("userGroupIds", UserGroupIds);
            writer.WriteCollectionOfPrimitiveValues<string>("userIds", UserIds);
            writer.WriteStringValue("workspaceId", WorkspaceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
