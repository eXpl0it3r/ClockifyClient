// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Workspace settings also include Time Duration Format settings.Setting Time Duration Format by changing the boolean fieldsdecimalFormat and trackTimeDownToSecond is now deprecated.Time Duration Format can be set by durationFormat enum field.Three different Time Duration modes will still map the boolean fields:    1. Full (hh:mm:ss) -&gt; decimalFormat = false, trackTimeDownToSecond = true,    2. Compact (h:mm) -&gt; decimalFormat = false, trackTimeDownToSecond = false,    3. Decimal (h:hh) -&gt; decimalFormat = true, trackTimeDownToSecond = true
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WorkspaceSettingsDtoV1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Indicates whether billable hours is active.</summary>
        public bool? ActiveBillableHours { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents a unique list of protected page enums.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_adminOnlyPages?>? AdminOnlyPages { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_adminOnlyPages?> AdminOnlyPages { get; set; }
#endif
        /// <summary>Represents an automatic lock object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.AutomaticLockDtoV1? AutomaticLock { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.AutomaticLockDtoV1 AutomaticLock { get; set; }
#endif
        /// <summary>Indicates whether timesheets are visible or not.</summary>
        public bool? CanSeeTimeSheet { get; set; }
        /// <summary>Indicates whether time trackers are visible or not.</summary>
        public bool? CanSeeTracker { get; set; }
        /// <summary>Represents a clockify currency format enum.</summary>
        public global::ClockifyClient.Models.WorkspaceSettingsDtoV1_currencyFormat? CurrencyFormat { get; set; }
        /// <summary>Indicates whether projects are billable by default.</summary>
        public bool? DefaultBillableProjects { get; set; }
        /// <summary>Represents a clockify duration format enum. Used to set Duration format instead of setting decimalFormat and trackTimeDownToSecond.</summary>
        public global::ClockifyClient.Models.WorkspaceSettingsDtoV1_durationFormat? DurationFormat { get; set; }
        /// <summary>Represents an entity creation permission object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.EntityCreationPermissionsDtoV1? EntityCreationPermissions { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.EntityCreationPermissionsDtoV1 EntityCreationPermissions { get; set; }
#endif
        /// <summary>Indicates whether description are forced or not.</summary>
        public bool? ForceDescription { get; set; }
        /// <summary>Indicates whether projects are forced or not.</summary>
        public bool? ForceProjects { get; set; }
        /// <summary>Indicates whether tags are forced or not.</summary>
        public bool? ForceTags { get; set; }
        /// <summary>Indicates whether tasks are forced or not.</summary>
        public bool? ForceTasks { get; set; }
        /// <summary>The isProjectPublicByDefault property</summary>
        public bool? IsProjectPublicByDefault { get; set; }
        /// <summary>The lockTimeEntries property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockTimeEntries { get; set; }
#nullable restore
#else
        public string LockTimeEntries { get; set; }
#endif
        /// <summary>The lockTimeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LockTimeZone { get; set; }
#nullable restore
#else
        public string LockTimeZone { get; set; }
#endif
        /// <summary>Indicates whether two-factor authentication is enabled or not.</summary>
        public bool? MultiFactorEnabled { get; set; }
        /// <summary>Represents a clockify number format enum.</summary>
        public global::ClockifyClient.Models.WorkspaceSettingsDtoV1_numberFormat? NumberFormat { get; set; }
        /// <summary>Indicates whether only admins can change billable status.</summary>
        public bool? OnlyAdminsCanChangeBillableStatus { get; set; }
        /// <summary>Indicates whether only admins can create projects.</summary>
        public bool? OnlyAdminsCreateProject { get; set; }
        /// <summary>Indicates whether only admins can create tags.</summary>
        public bool? OnlyAdminsCreateTag { get; set; }
        /// <summary>Indicates whether only admins can create task.</summary>
        public bool? OnlyAdminsCreateTask { get; set; }
        /// <summary>Indicates whether only admins can see all time entries.</summary>
        public bool? OnlyAdminsSeeAllTimeEntries { get; set; }
        /// <summary>Indicates whether only admins can see billable rates.</summary>
        public bool? OnlyAdminsSeeBillableRates { get; set; }
        /// <summary>Indicates whether only admins can see dashboard.</summary>
        public bool? OnlyAdminsSeeDashboard { get; set; }
        /// <summary>Indicates whether only admins can see public project entries.</summary>
        public bool? OnlyAdminsSeePublicProjectsEntries { get; set; }
        /// <summary>Indicates whether project favorites are allowed.</summary>
        public bool? ProjectFavorites { get; set; }
        /// <summary>Represents a project grouping label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectGroupingLabel { get; set; }
#nullable restore
#else
        public string ProjectGroupingLabel { get; set; }
#endif
        /// <summary>Indicates whether project picker special filter is enabled.</summary>
        public bool? ProjectPickerSpecialFilter { get; set; }
        /// <summary>Represents a time rounding object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.RoundDto? Round { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.RoundDto Round { get; set; }
#endif
        /// <summary>Indicates whether time rounding is enabled in reports.</summary>
        public bool? TimeRoundingInReports { get; set; }
        /// <summary>Represents a time tracking mode enum.</summary>
        public global::ClockifyClient.Models.WorkspaceSettingsDtoV1_timeTrackingMode? TimeTrackingMode { get; set; }
        /// <summary>Indicates whether time tracking is seconds-accurate. This is now deprecated and durationFormat can now be used to manage Time Duration Format.</summary>
        [Obsolete("")]
        public bool? TrackTimeDownToSecond { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.WorkspaceSettingsDtoV1"/> and sets the default values.
        /// </summary>
        public WorkspaceSettingsDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.WorkspaceSettingsDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.WorkspaceSettingsDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.WorkspaceSettingsDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activeBillableHours", n => { ActiveBillableHours = n.GetBoolValue(); } },
                { "adminOnlyPages", n => { AdminOnlyPages = n.GetCollectionOfEnumValues<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_adminOnlyPages>()?.AsList(); } },
                { "automaticLock", n => { AutomaticLock = n.GetObjectValue<global::ClockifyClient.Models.AutomaticLockDtoV1>(global::ClockifyClient.Models.AutomaticLockDtoV1.CreateFromDiscriminatorValue); } },
                { "canSeeTimeSheet", n => { CanSeeTimeSheet = n.GetBoolValue(); } },
                { "canSeeTracker", n => { CanSeeTracker = n.GetBoolValue(); } },
                { "currencyFormat", n => { CurrencyFormat = n.GetEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_currencyFormat>(); } },
                { "defaultBillableProjects", n => { DefaultBillableProjects = n.GetBoolValue(); } },
                { "durationFormat", n => { DurationFormat = n.GetEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_durationFormat>(); } },
                { "entityCreationPermissions", n => { EntityCreationPermissions = n.GetObjectValue<global::ClockifyClient.Models.EntityCreationPermissionsDtoV1>(global::ClockifyClient.Models.EntityCreationPermissionsDtoV1.CreateFromDiscriminatorValue); } },
                { "forceDescription", n => { ForceDescription = n.GetBoolValue(); } },
                { "forceProjects", n => { ForceProjects = n.GetBoolValue(); } },
                { "forceTags", n => { ForceTags = n.GetBoolValue(); } },
                { "forceTasks", n => { ForceTasks = n.GetBoolValue(); } },
                { "isProjectPublicByDefault", n => { IsProjectPublicByDefault = n.GetBoolValue(); } },
                { "lockTimeEntries", n => { LockTimeEntries = n.GetStringValue(); } },
                { "lockTimeZone", n => { LockTimeZone = n.GetStringValue(); } },
                { "multiFactorEnabled", n => { MultiFactorEnabled = n.GetBoolValue(); } },
                { "numberFormat", n => { NumberFormat = n.GetEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_numberFormat>(); } },
                { "onlyAdminsCanChangeBillableStatus", n => { OnlyAdminsCanChangeBillableStatus = n.GetBoolValue(); } },
                { "onlyAdminsCreateProject", n => { OnlyAdminsCreateProject = n.GetBoolValue(); } },
                { "onlyAdminsCreateTag", n => { OnlyAdminsCreateTag = n.GetBoolValue(); } },
                { "onlyAdminsCreateTask", n => { OnlyAdminsCreateTask = n.GetBoolValue(); } },
                { "onlyAdminsSeeAllTimeEntries", n => { OnlyAdminsSeeAllTimeEntries = n.GetBoolValue(); } },
                { "onlyAdminsSeeBillableRates", n => { OnlyAdminsSeeBillableRates = n.GetBoolValue(); } },
                { "onlyAdminsSeeDashboard", n => { OnlyAdminsSeeDashboard = n.GetBoolValue(); } },
                { "onlyAdminsSeePublicProjectsEntries", n => { OnlyAdminsSeePublicProjectsEntries = n.GetBoolValue(); } },
                { "projectFavorites", n => { ProjectFavorites = n.GetBoolValue(); } },
                { "projectGroupingLabel", n => { ProjectGroupingLabel = n.GetStringValue(); } },
                { "projectPickerSpecialFilter", n => { ProjectPickerSpecialFilter = n.GetBoolValue(); } },
                { "round", n => { Round = n.GetObjectValue<global::ClockifyClient.Models.RoundDto>(global::ClockifyClient.Models.RoundDto.CreateFromDiscriminatorValue); } },
                { "timeRoundingInReports", n => { TimeRoundingInReports = n.GetBoolValue(); } },
                { "timeTrackingMode", n => { TimeTrackingMode = n.GetEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_timeTrackingMode>(); } },
                { "trackTimeDownToSecond", n => { TrackTimeDownToSecond = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("activeBillableHours", ActiveBillableHours);
            writer.WriteCollectionOfEnumValues<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_adminOnlyPages>("adminOnlyPages", AdminOnlyPages);
            writer.WriteObjectValue<global::ClockifyClient.Models.AutomaticLockDtoV1>("automaticLock", AutomaticLock);
            writer.WriteBoolValue("canSeeTimeSheet", CanSeeTimeSheet);
            writer.WriteBoolValue("canSeeTracker", CanSeeTracker);
            writer.WriteEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_currencyFormat>("currencyFormat", CurrencyFormat);
            writer.WriteBoolValue("defaultBillableProjects", DefaultBillableProjects);
            writer.WriteEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_durationFormat>("durationFormat", DurationFormat);
            writer.WriteObjectValue<global::ClockifyClient.Models.EntityCreationPermissionsDtoV1>("entityCreationPermissions", EntityCreationPermissions);
            writer.WriteBoolValue("forceDescription", ForceDescription);
            writer.WriteBoolValue("forceProjects", ForceProjects);
            writer.WriteBoolValue("forceTags", ForceTags);
            writer.WriteBoolValue("forceTasks", ForceTasks);
            writer.WriteBoolValue("isProjectPublicByDefault", IsProjectPublicByDefault);
            writer.WriteStringValue("lockTimeEntries", LockTimeEntries);
            writer.WriteStringValue("lockTimeZone", LockTimeZone);
            writer.WriteBoolValue("multiFactorEnabled", MultiFactorEnabled);
            writer.WriteEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_numberFormat>("numberFormat", NumberFormat);
            writer.WriteBoolValue("onlyAdminsCanChangeBillableStatus", OnlyAdminsCanChangeBillableStatus);
            writer.WriteBoolValue("onlyAdminsCreateProject", OnlyAdminsCreateProject);
            writer.WriteBoolValue("onlyAdminsCreateTag", OnlyAdminsCreateTag);
            writer.WriteBoolValue("onlyAdminsCreateTask", OnlyAdminsCreateTask);
            writer.WriteBoolValue("onlyAdminsSeeAllTimeEntries", OnlyAdminsSeeAllTimeEntries);
            writer.WriteBoolValue("onlyAdminsSeeBillableRates", OnlyAdminsSeeBillableRates);
            writer.WriteBoolValue("onlyAdminsSeeDashboard", OnlyAdminsSeeDashboard);
            writer.WriteBoolValue("onlyAdminsSeePublicProjectsEntries", OnlyAdminsSeePublicProjectsEntries);
            writer.WriteBoolValue("projectFavorites", ProjectFavorites);
            writer.WriteStringValue("projectGroupingLabel", ProjectGroupingLabel);
            writer.WriteBoolValue("projectPickerSpecialFilter", ProjectPickerSpecialFilter);
            writer.WriteObjectValue<global::ClockifyClient.Models.RoundDto>("round", Round);
            writer.WriteBoolValue("timeRoundingInReports", TimeRoundingInReports);
            writer.WriteEnumValue<global::ClockifyClient.Models.WorkspaceSettingsDtoV1_timeTrackingMode>("timeTrackingMode", TimeTrackingMode);
            writer.WriteBoolValue("trackTimeDownToSecond", TrackTimeDownToSecond);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
