// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DetailedReportFilterV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amounts property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.DetailedReportFilterV1_amounts?>? Amounts { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.DetailedReportFilterV1_amounts?> Amounts { get; set; }
#endif
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided amount shown.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_amountShown? AmountShown { get; set; }
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided approval state.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_approvalState? ApprovalState { get; set; }
        /// <summary>Indicates whether the report is archived</summary>
        public bool? Archived { get; set; }
        /// <summary>Represents attendance report filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.AttendanceFilterV1? AttendanceFilter { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.AttendanceFilterV1 AttendanceFilter { get; set; }
#endif
        /// <summary>Indicates whether the report is billable</summary>
        public bool? Billable { get; set; }
        /// <summary>The clients property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsArchivedFilterV1? Clients { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsArchivedFilterV1 Clients { get; set; }
#endif
        /// <summary>The currency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsArchivedFilterV1? Currency { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsArchivedFilterV1 Currency { get; set; }
#endif
        /// <summary>The customFields property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.CustomFieldFilterV1>? CustomFields { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.CustomFieldFilterV1> CustomFields { get; set; }
#endif
        /// <summary>Provide date in format YYYY-MM-DD</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateFormat { get; set; }
#nullable restore
#else
        public string DateFormat { get; set; }
#endif
        /// <summary>Provide date in format YYYY-MM-DDTHH:MM:SS.ssssssZ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateRangeEnd { get; set; }
#nullable restore
#else
        public string DateRangeEnd { get; set; }
#endif
        /// <summary>Provide date in format YYYY-MM-DDTHH:MM:SS.ssssssZ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DateRangeStart { get; set; }
#nullable restore
#else
        public string DateRangeStart { get; set; }
#endif
        /// <summary>Provide date range type</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_dateRangeType? DateRangeType { get; set; }
        /// <summary>Represents search term for filtering report entries by description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Represents detailed report filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.DetailedFilterV1? DetailedFilter { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.DetailedFilterV1 DetailedFilter { get; set; }
#endif
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided export type.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_exportType? ExportType { get; set; }
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided invoicing state.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_invoicingState? InvoicingState { get; set; }
        /// <summary>The projects property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsArchivedFilterV1? Projects { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsArchivedFilterV1 Projects { get; set; }
#endif
        /// <summary>Indicates whether the report filter is rounding</summary>
        public bool? Rounding { get; set; }
        /// <summary>If provided, you&apos;ll get sorted result by provided sort order.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_sortOrder? SortOrder { get; set; }
        /// <summary>Represents summary report filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.SummaryFilterV1? SummaryFilter { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.SummaryFilterV1 SummaryFilter { get; set; }
#endif
        /// <summary>Represents object for filtering entries by tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsTagFilterV1? Tags { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsTagFilterV1 Tags { get; set; }
#endif
        /// <summary>Represents filter criteria for expenses associated with tasks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsTaskFilterV1? Tasks { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsTaskFilterV1 Tasks { get; set; }
#endif
        /// <summary>Provide time in format THH:MM:SS.ssssss</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeFormat { get; set; }
#nullable restore
#else
        public string TimeFormat { get; set; }
#endif
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided time zone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>The userGroups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsUsersFilterV1? UserGroups { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsUsersFilterV1 UserGroups { get; set; }
#endif
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided user locale.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserLocale { get; set; }
#nullable restore
#else
        public string UserLocale { get; set; }
#endif
        /// <summary>The users property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsUsersFilterV1? Users { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsUsersFilterV1 Users { get; set; }
#endif
        /// <summary>Represents weekly report filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.WeeklyFilterV1? WeeklyFilter { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.WeeklyFilterV1 WeeklyFilter { get; set; }
#endif
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided week start.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_weekStart? WeekStart { get; set; }
        /// <summary>If set to &apos;true&apos;, report will only include entries with empty description</summary>
        public bool? WithoutDescription { get; set; }
        /// <summary>If provided, you&apos;ll get filtered result including reports with provided zoom level.</summary>
        public global::ClockifyClient.Models.DetailedReportFilterV1_zoomLevel? ZoomLevel { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.DetailedReportFilterV1"/> and sets the default values.
        /// </summary>
        public DetailedReportFilterV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.DetailedReportFilterV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.DetailedReportFilterV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.DetailedReportFilterV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amountShown", n => { AmountShown = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_amountShown>(); } },
                { "amounts", n => { Amounts = n.GetCollectionOfEnumValues<global::ClockifyClient.Models.DetailedReportFilterV1_amounts>()?.AsList(); } },
                { "approvalState", n => { ApprovalState = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_approvalState>(); } },
                { "archived", n => { Archived = n.GetBoolValue(); } },
                { "attendanceFilter", n => { AttendanceFilter = n.GetObjectValue<global::ClockifyClient.Models.AttendanceFilterV1>(global::ClockifyClient.Models.AttendanceFilterV1.CreateFromDiscriminatorValue); } },
                { "billable", n => { Billable = n.GetBoolValue(); } },
                { "clients", n => { Clients = n.GetObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterV1>(global::ClockifyClient.Models.ContainsArchivedFilterV1.CreateFromDiscriminatorValue); } },
                { "currency", n => { Currency = n.GetObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterV1>(global::ClockifyClient.Models.ContainsArchivedFilterV1.CreateFromDiscriminatorValue); } },
                { "customFields", n => { CustomFields = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.CustomFieldFilterV1>(global::ClockifyClient.Models.CustomFieldFilterV1.CreateFromDiscriminatorValue)?.AsList(); } },
                { "dateFormat", n => { DateFormat = n.GetStringValue(); } },
                { "dateRangeEnd", n => { DateRangeEnd = n.GetStringValue(); } },
                { "dateRangeStart", n => { DateRangeStart = n.GetStringValue(); } },
                { "dateRangeType", n => { DateRangeType = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_dateRangeType>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "detailedFilter", n => { DetailedFilter = n.GetObjectValue<global::ClockifyClient.Models.DetailedFilterV1>(global::ClockifyClient.Models.DetailedFilterV1.CreateFromDiscriminatorValue); } },
                { "exportType", n => { ExportType = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_exportType>(); } },
                { "invoicingState", n => { InvoicingState = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_invoicingState>(); } },
                { "projects", n => { Projects = n.GetObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterV1>(global::ClockifyClient.Models.ContainsArchivedFilterV1.CreateFromDiscriminatorValue); } },
                { "rounding", n => { Rounding = n.GetBoolValue(); } },
                { "sortOrder", n => { SortOrder = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_sortOrder>(); } },
                { "summaryFilter", n => { SummaryFilter = n.GetObjectValue<global::ClockifyClient.Models.SummaryFilterV1>(global::ClockifyClient.Models.SummaryFilterV1.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetObjectValue<global::ClockifyClient.Models.ContainsTagFilterV1>(global::ClockifyClient.Models.ContainsTagFilterV1.CreateFromDiscriminatorValue); } },
                { "tasks", n => { Tasks = n.GetObjectValue<global::ClockifyClient.Models.ContainsTaskFilterV1>(global::ClockifyClient.Models.ContainsTaskFilterV1.CreateFromDiscriminatorValue); } },
                { "timeFormat", n => { TimeFormat = n.GetStringValue(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "userGroups", n => { UserGroups = n.GetObjectValue<global::ClockifyClient.Models.ContainsUsersFilterV1>(global::ClockifyClient.Models.ContainsUsersFilterV1.CreateFromDiscriminatorValue); } },
                { "userLocale", n => { UserLocale = n.GetStringValue(); } },
                { "users", n => { Users = n.GetObjectValue<global::ClockifyClient.Models.ContainsUsersFilterV1>(global::ClockifyClient.Models.ContainsUsersFilterV1.CreateFromDiscriminatorValue); } },
                { "weekStart", n => { WeekStart = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_weekStart>(); } },
                { "weeklyFilter", n => { WeeklyFilter = n.GetObjectValue<global::ClockifyClient.Models.WeeklyFilterV1>(global::ClockifyClient.Models.WeeklyFilterV1.CreateFromDiscriminatorValue); } },
                { "withoutDescription", n => { WithoutDescription = n.GetBoolValue(); } },
                { "zoomLevel", n => { ZoomLevel = n.GetEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_zoomLevel>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfEnumValues<global::ClockifyClient.Models.DetailedReportFilterV1_amounts>("amounts", Amounts);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_amountShown>("amountShown", AmountShown);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_approvalState>("approvalState", ApprovalState);
            writer.WriteBoolValue("archived", Archived);
            writer.WriteObjectValue<global::ClockifyClient.Models.AttendanceFilterV1>("attendanceFilter", AttendanceFilter);
            writer.WriteBoolValue("billable", Billable);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterV1>("clients", Clients);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterV1>("currency", Currency);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.CustomFieldFilterV1>("customFields", CustomFields);
            writer.WriteStringValue("dateFormat", DateFormat);
            writer.WriteStringValue("dateRangeEnd", DateRangeEnd);
            writer.WriteStringValue("dateRangeStart", DateRangeStart);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_dateRangeType>("dateRangeType", DateRangeType);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::ClockifyClient.Models.DetailedFilterV1>("detailedFilter", DetailedFilter);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_exportType>("exportType", ExportType);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_invoicingState>("invoicingState", InvoicingState);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterV1>("projects", Projects);
            writer.WriteBoolValue("rounding", Rounding);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_sortOrder>("sortOrder", SortOrder);
            writer.WriteObjectValue<global::ClockifyClient.Models.SummaryFilterV1>("summaryFilter", SummaryFilter);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsTagFilterV1>("tags", Tags);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsTaskFilterV1>("tasks", Tasks);
            writer.WriteStringValue("timeFormat", TimeFormat);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsUsersFilterV1>("userGroups", UserGroups);
            writer.WriteStringValue("userLocale", UserLocale);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsUsersFilterV1>("users", Users);
            writer.WriteObjectValue<global::ClockifyClient.Models.WeeklyFilterV1>("weeklyFilter", WeeklyFilter);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_weekStart>("weekStart", WeekStart);
            writer.WriteBoolValue("withoutDescription", WithoutDescription);
            writer.WriteEnumValue<global::ClockifyClient.Models.DetailedReportFilterV1_zoomLevel>("zoomLevel", ZoomLevel);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
