// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TimeIntervalDto_timeZone_rules_transitions : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dateTimeAfter property</summary>
        public DateTimeOffset? DateTimeAfter { get; set; }
        /// <summary>The dateTimeBefore property</summary>
        public DateTimeOffset? DateTimeBefore { get; set; }
        /// <summary>The duration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_duration? Duration { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_duration Duration { get; set; }
#endif
        /// <summary>The gap property</summary>
        public bool? Gap { get; set; }
        /// <summary>The instant property</summary>
        public DateTimeOffset? Instant { get; set; }
        /// <summary>The offsetAfter property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetAfter? OffsetAfter { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetAfter OffsetAfter { get; set; }
#endif
        /// <summary>The offsetBefore property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetBefore? OffsetBefore { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetBefore OffsetBefore { get; set; }
#endif
        /// <summary>The overlap property</summary>
        public bool? Overlap { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions"/> and sets the default values.
        /// </summary>
        public TimeIntervalDto_timeZone_rules_transitions()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dateTimeAfter", n => { DateTimeAfter = n.GetDateTimeOffsetValue(); } },
                { "dateTimeBefore", n => { DateTimeBefore = n.GetDateTimeOffsetValue(); } },
                { "duration", n => { Duration = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_duration>(global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_duration.CreateFromDiscriminatorValue); } },
                { "gap", n => { Gap = n.GetBoolValue(); } },
                { "instant", n => { Instant = n.GetDateTimeOffsetValue(); } },
                { "offsetAfter", n => { OffsetAfter = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetAfter>(global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetAfter.CreateFromDiscriminatorValue); } },
                { "offsetBefore", n => { OffsetBefore = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetBefore>(global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetBefore.CreateFromDiscriminatorValue); } },
                { "overlap", n => { Overlap = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("dateTimeAfter", DateTimeAfter);
            writer.WriteDateTimeOffsetValue("dateTimeBefore", DateTimeBefore);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_duration>("duration", Duration);
            writer.WriteBoolValue("gap", Gap);
            writer.WriteDateTimeOffsetValue("instant", Instant);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetAfter>("offsetAfter", OffsetAfter);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitions_offsetBefore>("offsetBefore", OffsetBefore);
            writer.WriteBoolValue("overlap", Overlap);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
