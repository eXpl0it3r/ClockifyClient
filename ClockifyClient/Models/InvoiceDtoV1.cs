// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represents a list of invoices.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoiceDtoV1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents an invoice amount as long.</summary>
        public long? Amount { get; set; }
        /// <summary>Represents an invoice balance amount as long.</summary>
        public long? Balance { get; set; }
        /// <summary>Represents client identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>Represents client name for an invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientName { get; set; }
#nullable restore
#else
        public string ClientName { get; set; }
#endif
        /// <summary>Represents the currency used by the invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Represents an invoice due date in yyyy-MM-ddThh:mm:ssZ format.</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>Represents invoice identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represents an invoice issued date in yyyy-MM-ddThh:mm:ssZ format.</summary>
        public DateTimeOffset? IssuedDate { get; set; }
        /// <summary>Represents an invoice number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>Represents an invoice paid amount as long.</summary>
        public long? Paid { get; set; }
        /// <summary>Represents the status of an invoice.</summary>
        public global::ClockifyClient.Models.InvoiceDtoV1_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.InvoiceDtoV1"/> and sets the default values.
        /// </summary>
        public InvoiceDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.InvoiceDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.InvoiceDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.InvoiceDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetLongValue(); } },
                { "balance", n => { Balance = n.GetLongValue(); } },
                { "clientId", n => { ClientId = n.GetStringValue(); } },
                { "clientName", n => { ClientName = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "dueDate", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issuedDate", n => { IssuedDate = n.GetDateTimeOffsetValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "paid", n => { Paid = n.GetLongValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::ClockifyClient.Models.InvoiceDtoV1_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("amount", Amount);
            writer.WriteLongValue("balance", Balance);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("clientName", ClientName);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDateTimeOffsetValue("dueDate", DueDate);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("issuedDate", IssuedDate);
            writer.WriteStringValue("number", Number);
            writer.WriteLongValue("paid", Paid);
            writer.WriteEnumValue<global::ClockifyClient.Models.InvoiceDtoV1_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
