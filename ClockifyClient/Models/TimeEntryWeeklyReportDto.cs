// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// report
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TimeEntryWeeklyReportDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether time entry report is in decimal format.</summary>
        public bool? DecimalFormat { get; set; }
        /// <summary>List of groups</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.GroupOneDto>? GroupOne { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.GroupOneDto> GroupOne { get; set; }
#endif
        /// <summary>Indicates whether time entry report includes users without time.</summary>
        public bool? IncludeUsersWithoutTime { get; set; }
        /// <summary>List of totals</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.TimeEntryReportTotals>? Totals { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.TimeEntryReportTotals> Totals { get; set; }
#endif
        /// <summary>The totalsByDay property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.DailyTotalDto>? TotalsByDay { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.DailyTotalDto> TotalsByDay { get; set; }
#endif
        /// <summary>The trackTimeDownToSeconds property</summary>
        public bool? TrackTimeDownToSeconds { get; set; }
        /// <summary>The usersWithoutTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.UserDto>? UsersWithoutTime { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.UserDto> UsersWithoutTime { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.TimeEntryWeeklyReportDto"/> and sets the default values.
        /// </summary>
        public TimeEntryWeeklyReportDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeEntryWeeklyReportDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.TimeEntryWeeklyReportDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.TimeEntryWeeklyReportDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "decimalFormat", n => { DecimalFormat = n.GetBoolValue(); } },
                { "groupOne", n => { GroupOne = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.GroupOneDto>(global::ClockifyClient.Models.GroupOneDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "includeUsersWithoutTime", n => { IncludeUsersWithoutTime = n.GetBoolValue(); } },
                { "totals", n => { Totals = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.TimeEntryReportTotals>(global::ClockifyClient.Models.TimeEntryReportTotals.CreateFromDiscriminatorValue)?.AsList(); } },
                { "totalsByDay", n => { TotalsByDay = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.DailyTotalDto>(global::ClockifyClient.Models.DailyTotalDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "trackTimeDownToSeconds", n => { TrackTimeDownToSeconds = n.GetBoolValue(); } },
                { "usersWithoutTime", n => { UsersWithoutTime = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.UserDto>(global::ClockifyClient.Models.UserDto.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("decimalFormat", DecimalFormat);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.GroupOneDto>("groupOne", GroupOne);
            writer.WriteBoolValue("includeUsersWithoutTime", IncludeUsersWithoutTime);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.TimeEntryReportTotals>("totals", Totals);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.DailyTotalDto>("totalsByDay", TotalsByDay);
            writer.WriteBoolValue("trackTimeDownToSeconds", TrackTimeDownToSeconds);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.UserDto>("usersWithoutTime", UsersWithoutTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
