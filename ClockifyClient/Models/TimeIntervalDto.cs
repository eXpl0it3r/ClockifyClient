// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TimeIntervalDto : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents a time duration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Duration { get; set; }
#nullable restore
#else
        public string Duration { get; set; }
#endif
        /// <summary>The end property</summary>
        public DateTimeOffset? End { get; set; }
        /// <summary>The offsetEnd property</summary>
        public int? OffsetEnd { get; set; }
        /// <summary>The offsetStart property</summary>
        public int? OffsetStart { get; set; }
        /// <summary>The start property</summary>
        public DateTimeOffset? Start { get; set; }
        /// <summary>The timeZone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone? TimeZone { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone TimeZone { get; set; }
#endif
        /// <summary>The zonedEnd property</summary>
        public DateTimeOffset? ZonedEnd { get; set; }
        /// <summary>The zonedStart property</summary>
        public DateTimeOffset? ZonedStart { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.TimeIntervalDto"/> and sets the default values.
        /// </summary>
        public TimeIntervalDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeIntervalDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.TimeIntervalDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.TimeIntervalDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "duration", n => { Duration = n.GetStringValue(); } },
                { "end", n => { End = n.GetDateTimeOffsetValue(); } },
                { "offsetEnd", n => { OffsetEnd = n.GetIntValue(); } },
                { "offsetStart", n => { OffsetStart = n.GetIntValue(); } },
                { "start", n => { Start = n.GetDateTimeOffsetValue(); } },
                { "timeZone", n => { TimeZone = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone>(global::ClockifyClient.Models.TimeIntervalDto_timeZone.CreateFromDiscriminatorValue); } },
                { "zonedEnd", n => { ZonedEnd = n.GetDateTimeOffsetValue(); } },
                { "zonedStart", n => { ZonedStart = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("duration", Duration);
            writer.WriteDateTimeOffsetValue("end", End);
            writer.WriteIntValue("offsetEnd", OffsetEnd);
            writer.WriteIntValue("offsetStart", OffsetStart);
            writer.WriteDateTimeOffsetValue("start", Start);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone>("timeZone", TimeZone);
            writer.WriteDateTimeOffsetValue("zonedEnd", ZonedEnd);
            writer.WriteDateTimeOffsetValue("zonedStart", ZonedStart);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
