// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class GetUsersRequestV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>If provided, you&apos;ll get a filtered list of users with the corresponding account status filter. If not, this will only filter ACTIVE, PENDING_EMAIL_VERIFICATION, and NOT_REGISTERED Users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AccountStatuses { get; set; }
#nullable restore
#else
        public List<string> AccountStatuses { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If provided, you&apos;ll get a filtered list of users that contain the provided string in their email address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>If you pass along includeRoles=true, you&apos;ll get each user&apos;s detailed manager role (including projects and members for whom they&apos;re managers)</summary>
        public bool? IncludeRoles { get; set; }
        /// <summary>If provided, you&apos;ll get all users along with workspaces, groups, or projects they have access to.</summary>
        public global::ClockifyClient.Models.GetUsersRequestV1_memberships? Memberships { get; set; }
        /// <summary>If provided, you&apos;ll get a filtered list of users that contain the provided string in their name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Page number.</summary>
        public int? Page { get; set; }
        /// <summary>Page size.</summary>
        public int? PageSize { get; set; }
        /// <summary>If provided, you&apos;ll get a list of users that have access to the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>If provided, you&apos;ll get a filtered list of users that have any of the specified roles. Owners are counted as admins when filtering.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.GetUsersRequestV1_roles?>? Roles { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.GetUsersRequestV1_roles?> Roles { get; set; }
#endif
        /// <summary>Sorting criteria</summary>
        public global::ClockifyClient.Models.GetUsersRequestV1_sortColumn? SortColumn { get; set; }
        /// <summary>Sorting mode</summary>
        public global::ClockifyClient.Models.GetUsersRequestV1_sortOrder? SortOrder { get; set; }
        /// <summary>If provided, you&apos;ll get a filtered list of users with the corresponding status.</summary>
        public global::ClockifyClient.Models.GetUsersRequestV1_status? Status { get; set; }
        /// <summary>If provided, you&apos;ll get a list of users that belong to the specified user group IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UserGroups { get; set; }
#nullable restore
#else
        public List<string> UserGroups { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.GetUsersRequestV1"/> and sets the default values.
        /// </summary>
        public GetUsersRequestV1()
        {
            AdditionalData = new Dictionary<string, object>();
            Memberships = global::ClockifyClient.Models.GetUsersRequestV1_memberships.NONE;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.GetUsersRequestV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.GetUsersRequestV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.GetUsersRequestV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountStatuses", n => { AccountStatuses = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "includeRoles", n => { IncludeRoles = n.GetBoolValue(); } },
                { "memberships", n => { Memberships = n.GetEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_memberships>(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "page", n => { Page = n.GetIntValue(); } },
                { "pageSize", n => { PageSize = n.GetIntValue(); } },
                { "projectId", n => { ProjectId = n.GetStringValue(); } },
                { "roles", n => { Roles = n.GetCollectionOfEnumValues<global::ClockifyClient.Models.GetUsersRequestV1_roles>()?.AsList(); } },
                { "sortColumn", n => { SortColumn = n.GetEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_sortColumn>(); } },
                { "sortOrder", n => { SortOrder = n.GetEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_sortOrder>(); } },
                { "status", n => { Status = n.GetEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_status>(); } },
                { "userGroups", n => { UserGroups = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("accountStatuses", AccountStatuses);
            writer.WriteStringValue("email", Email);
            writer.WriteBoolValue("includeRoles", IncludeRoles);
            writer.WriteEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_memberships>("memberships", Memberships);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("page", Page);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteCollectionOfEnumValues<global::ClockifyClient.Models.GetUsersRequestV1_roles>("roles", Roles);
            writer.WriteEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_sortColumn>("sortColumn", SortColumn);
            writer.WriteEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_sortOrder>("sortOrder", SortOrder);
            writer.WriteEnumValue<global::ClockifyClient.Models.GetUsersRequestV1_status>("status", Status);
            writer.WriteCollectionOfPrimitiveValues<string>("userGroups", UserGroups);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
