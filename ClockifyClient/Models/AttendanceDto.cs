// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// List of entities
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AttendanceDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The break property</summary>
        public long? Break { get; set; }
        /// <summary>The capacity property</summary>
        public int? Capacity { get; set; }
        /// <summary>The date property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>The endTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EndTime { get; set; }
#nullable restore
#else
        public string EndTime { get; set; }
#endif
        /// <summary>The hasRunningEntry property</summary>
        public bool? HasRunningEntry { get; set; }
        /// <summary>The imageUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageUrl { get; set; }
#nullable restore
#else
        public string ImageUrl { get; set; }
#endif
        /// <summary>The overtime property</summary>
        public long? Overtime { get; set; }
        /// <summary>The remainingCapacity property</summary>
        public long? RemainingCapacity { get; set; }
        /// <summary>The startTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StartTime { get; set; }
#nullable restore
#else
        public string StartTime { get; set; }
#endif
        /// <summary>The timeOff property</summary>
        public long? TimeOff { get; set; }
        /// <summary>The totalDuration property</summary>
        public long? TotalDuration { get; set; }
        /// <summary>The userId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The userName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.AttendanceDto"/> and sets the default values.
        /// </summary>
        public AttendanceDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.AttendanceDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.AttendanceDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.AttendanceDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "break", n => { Break = n.GetLongValue(); } },
                { "capacity", n => { Capacity = n.GetIntValue(); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "endTime", n => { EndTime = n.GetStringValue(); } },
                { "hasRunningEntry", n => { HasRunningEntry = n.GetBoolValue(); } },
                { "imageUrl", n => { ImageUrl = n.GetStringValue(); } },
                { "overtime", n => { Overtime = n.GetLongValue(); } },
                { "remainingCapacity", n => { RemainingCapacity = n.GetLongValue(); } },
                { "startTime", n => { StartTime = n.GetStringValue(); } },
                { "timeOff", n => { TimeOff = n.GetLongValue(); } },
                { "totalDuration", n => { TotalDuration = n.GetLongValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("break", Break);
            writer.WriteIntValue("capacity", Capacity);
            writer.WriteStringValue("date", Date);
            writer.WriteStringValue("endTime", EndTime);
            writer.WriteBoolValue("hasRunningEntry", HasRunningEntry);
            writer.WriteStringValue("imageUrl", ImageUrl);
            writer.WriteLongValue("overtime", Overtime);
            writer.WriteLongValue("remainingCapacity", RemainingCapacity);
            writer.WriteStringValue("startTime", StartTime);
            writer.WriteLongValue("timeOff", TimeOff);
            writer.WriteLongValue("totalDuration", TotalDuration);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userName", UserName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
