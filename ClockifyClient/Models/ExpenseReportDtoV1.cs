// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represents list of expenses
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ExpenseReportDtoV1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents expenses amount.</summary>
        public double? Amount { get; set; }
        /// <summary>Represents approval request identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovalRequestId { get; set; }
#nullable restore
#else
        public string ApprovalRequestId { get; set; }
#endif
        /// <summary>Indicates whether the expenses is billable.</summary>
        public bool? Billable { get; set; }
        /// <summary>Indicates whether category has unit price.</summary>
        public bool? CategoryHasUnitPrice { get; set; }
        /// <summary>Represents category identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CategoryId { get; set; }
#nullable restore
#else
        public string CategoryId { get; set; }
#endif
        /// <summary>Represents category&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CategoryName { get; set; }
#nullable restore
#else
        public string CategoryName { get; set; }
#endif
        /// <summary>Represents category&apos;s unit.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CategoryUnit { get; set; }
#nullable restore
#else
        public string CategoryUnit { get; set; }
#endif
        /// <summary>Represents expenses date in YYYY-MM-DDTHH:MM:SS.ssssssZ format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Date { get; set; }
#nullable restore
#else
        public string Date { get; set; }
#endif
        /// <summary>Represents export fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.ExpenseReportDtoV1_exportFields?>? ExportFields { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.ExpenseReportDtoV1_exportFields?> ExportFields { get; set; }
#endif
        /// <summary>Represents file identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileId { get; set; }
#nullable restore
#else
        public string FileId { get; set; }
#endif
        /// <summary>Represents expenses file name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>Represents expenses identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Expense&apos;s invoicing info.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.InvoicingInfo? InvoicingInfo { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.InvoicingInfo InvoicingInfo { get; set; }
#endif
        /// <summary>Indicates whether the expenses is locked.</summary>
        public bool? Locked { get; set; }
        /// <summary>Represents expenses note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Represents project&apos;s color</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectColor { get; set; }
#nullable restore
#else
        public string ProjectColor { get; set; }
#endif
        /// <summary>Represents project identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>Represents project&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectName { get; set; }
#nullable restore
#else
        public string ProjectName { get; set; }
#endif
        /// <summary>Represents expenses quantity</summary>
        public double? Quantity { get; set; }
        /// <summary>Represents expense name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReportName { get; set; }
#nullable restore
#else
        public string ReportName { get; set; }
#endif
        /// <summary>Represents expense time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Time { get; set; }
#nullable restore
#else
        public string Time { get; set; }
#endif
        /// <summary>Represents user&apos;s email.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserEmail { get; set; }
#nullable restore
#else
        public string UserEmail { get; set; }
#endif
        /// <summary>Represents user identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Represents user&apos;s name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>Represents user&apos;s status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserStatus { get; set; }
#nullable restore
#else
        public string UserStatus { get; set; }
#endif
        /// <summary>Represents workspace identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkspaceId { get; set; }
#nullable restore
#else
        public string WorkspaceId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.ExpenseReportDtoV1"/> and sets the default values.
        /// </summary>
        public ExpenseReportDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.ExpenseReportDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.ExpenseReportDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.ExpenseReportDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "approvalRequestId", n => { ApprovalRequestId = n.GetStringValue(); } },
                { "billable", n => { Billable = n.GetBoolValue(); } },
                { "categoryHasUnitPrice", n => { CategoryHasUnitPrice = n.GetBoolValue(); } },
                { "categoryId", n => { CategoryId = n.GetStringValue(); } },
                { "categoryName", n => { CategoryName = n.GetStringValue(); } },
                { "categoryUnit", n => { CategoryUnit = n.GetStringValue(); } },
                { "date", n => { Date = n.GetStringValue(); } },
                { "exportFields", n => { ExportFields = n.GetCollectionOfEnumValues<global::ClockifyClient.Models.ExpenseReportDtoV1_exportFields>()?.AsList(); } },
                { "fileId", n => { FileId = n.GetStringValue(); } },
                { "fileName", n => { FileName = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "invoicingInfo", n => { InvoicingInfo = n.GetObjectValue<global::ClockifyClient.Models.InvoicingInfo>(global::ClockifyClient.Models.InvoicingInfo.CreateFromDiscriminatorValue); } },
                { "locked", n => { Locked = n.GetBoolValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "projectColor", n => { ProjectColor = n.GetStringValue(); } },
                { "projectId", n => { ProjectId = n.GetStringValue(); } },
                { "projectName", n => { ProjectName = n.GetStringValue(); } },
                { "quantity", n => { Quantity = n.GetDoubleValue(); } },
                { "reportName", n => { ReportName = n.GetStringValue(); } },
                { "time", n => { Time = n.GetStringValue(); } },
                { "userEmail", n => { UserEmail = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
                { "userStatus", n => { UserStatus = n.GetStringValue(); } },
                { "workspaceId", n => { WorkspaceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteStringValue("approvalRequestId", ApprovalRequestId);
            writer.WriteBoolValue("billable", Billable);
            writer.WriteBoolValue("categoryHasUnitPrice", CategoryHasUnitPrice);
            writer.WriteStringValue("categoryId", CategoryId);
            writer.WriteStringValue("categoryName", CategoryName);
            writer.WriteStringValue("categoryUnit", CategoryUnit);
            writer.WriteStringValue("date", Date);
            writer.WriteCollectionOfEnumValues<global::ClockifyClient.Models.ExpenseReportDtoV1_exportFields>("exportFields", ExportFields);
            writer.WriteStringValue("fileId", FileId);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::ClockifyClient.Models.InvoicingInfo>("invoicingInfo", InvoicingInfo);
            writer.WriteBoolValue("locked", Locked);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("projectColor", ProjectColor);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteStringValue("projectName", ProjectName);
            writer.WriteDoubleValue("quantity", Quantity);
            writer.WriteStringValue("reportName", ReportName);
            writer.WriteStringValue("time", Time);
            writer.WriteStringValue("userEmail", UserEmail);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userName", UserName);
            writer.WriteStringValue("userStatus", UserStatus);
            writer.WriteStringValue("workspaceId", WorkspaceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
