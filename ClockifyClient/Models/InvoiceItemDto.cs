// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represents a list of invoice item datatransfer objects.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoiceItemDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents item amount.</summary>
        public long? Amount { get; set; }
        /// <summary>Represents item applyTaxes type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ApplyTaxes? ApplyTaxes { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ApplyTaxes ApplyTaxes { get; set; }
#endif
        /// <summary>Represents an invoice item description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Represents item type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemType { get; set; }
#nullable restore
#else
        public string ItemType { get; set; }
#endif
        /// <summary>Represents an integer.</summary>
        public int? Order { get; set; }
        /// <summary>Represents item quantity.</summary>
        public long? Quantity { get; set; }
        /// <summary>Represents a list of time entrry IDs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? TimeEntryIds { get; set; }
#nullable restore
#else
        public List<string> TimeEntryIds { get; set; }
#endif
        /// <summary>Represents item unit price.</summary>
        public long? UnitPrice { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.InvoiceItemDto"/> and sets the default values.
        /// </summary>
        public InvoiceItemDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.InvoiceItemDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.InvoiceItemDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.InvoiceItemDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetLongValue(); } },
                { "applyTaxes", n => { ApplyTaxes = n.GetObjectValue<global::ClockifyClient.Models.ApplyTaxes>(global::ClockifyClient.Models.ApplyTaxes.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "itemType", n => { ItemType = n.GetStringValue(); } },
                { "order", n => { Order = n.GetIntValue(); } },
                { "quantity", n => { Quantity = n.GetLongValue(); } },
                { "timeEntryIds", n => { TimeEntryIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "unitPrice", n => { UnitPrice = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("amount", Amount);
            writer.WriteObjectValue<global::ClockifyClient.Models.ApplyTaxes>("applyTaxes", ApplyTaxes);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("itemType", ItemType);
            writer.WriteIntValue("order", Order);
            writer.WriteLongValue("quantity", Quantity);
            writer.WriteCollectionOfPrimitiveValues<string>("timeEntryIds", TimeEntryIds);
            writer.WriteLongValue("unitPrice", UnitPrice);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
