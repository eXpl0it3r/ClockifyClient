// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represents a label customization object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class LabelsCustomizationRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents invoice amount label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>Represents invoice bill from label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillFrom { get; set; }
#nullable restore
#else
        public string BillFrom { get; set; }
#endif
        /// <summary>Represents invoice bill to label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillTo { get; set; }
#nullable restore
#else
        public string BillTo { get; set; }
#endif
        /// <summary>Represents invoice description label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Represents invoice discount amount label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Discount { get; set; }
#nullable restore
#else
        public string Discount { get; set; }
#endif
        /// <summary>Represents invoice due date label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DueDate { get; set; }
#nullable restore
#else
        public string DueDate { get; set; }
#endif
        /// <summary>Represents invoice issue date label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssueDate { get; set; }
#nullable restore
#else
        public string IssueDate { get; set; }
#endif
        /// <summary>Represents invoice item type label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemType { get; set; }
#nullable restore
#else
        public string ItemType { get; set; }
#endif
        /// <summary>Represents invoice notes label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>Represents invoice paid amount label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Paid { get; set; }
#nullable restore
#else
        public string Paid { get; set; }
#endif
        /// <summary>Represents invoice quantity label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Quantity { get; set; }
#nullable restore
#else
        public string Quantity { get; set; }
#endif
        /// <summary>Represents invoice subtotal label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subtotal { get; set; }
#nullable restore
#else
        public string Subtotal { get; set; }
#endif
        /// <summary>Represents invoice tax amount label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tax { get; set; }
#nullable restore
#else
        public string Tax { get; set; }
#endif
        /// <summary>Represents invoice tax 2 amount label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tax2 { get; set; }
#nullable restore
#else
        public string Tax2 { get; set; }
#endif
        /// <summary>Represents invoice total amount label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Total { get; set; }
#nullable restore
#else
        public string Total { get; set; }
#endif
        /// <summary>Represents invoice total amount due label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TotalAmountDue { get; set; }
#nullable restore
#else
        public string TotalAmountDue { get; set; }
#endif
        /// <summary>Represents invoice unit price label.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitPrice { get; set; }
#nullable restore
#else
        public string UnitPrice { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.LabelsCustomizationRequest"/> and sets the default values.
        /// </summary>
        public LabelsCustomizationRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.LabelsCustomizationRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.LabelsCustomizationRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.LabelsCustomizationRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetStringValue(); } },
                { "billFrom", n => { BillFrom = n.GetStringValue(); } },
                { "billTo", n => { BillTo = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "discount", n => { Discount = n.GetStringValue(); } },
                { "dueDate", n => { DueDate = n.GetStringValue(); } },
                { "issueDate", n => { IssueDate = n.GetStringValue(); } },
                { "itemType", n => { ItemType = n.GetStringValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "paid", n => { Paid = n.GetStringValue(); } },
                { "quantity", n => { Quantity = n.GetStringValue(); } },
                { "subtotal", n => { Subtotal = n.GetStringValue(); } },
                { "tax", n => { Tax = n.GetStringValue(); } },
                { "tax2", n => { Tax2 = n.GetStringValue(); } },
                { "total", n => { Total = n.GetStringValue(); } },
                { "totalAmountDue", n => { TotalAmountDue = n.GetStringValue(); } },
                { "unitPrice", n => { UnitPrice = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("amount", Amount);
            writer.WriteStringValue("billFrom", BillFrom);
            writer.WriteStringValue("billTo", BillTo);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("discount", Discount);
            writer.WriteStringValue("dueDate", DueDate);
            writer.WriteStringValue("issueDate", IssueDate);
            writer.WriteStringValue("itemType", ItemType);
            writer.WriteStringValue("notes", Notes);
            writer.WriteStringValue("paid", Paid);
            writer.WriteStringValue("quantity", Quantity);
            writer.WriteStringValue("subtotal", Subtotal);
            writer.WriteStringValue("tax", Tax);
            writer.WriteStringValue("tax2", Tax2);
            writer.WriteStringValue("total", Total);
            writer.WriteStringValue("totalAmountDue", TotalAmountDue);
            writer.WriteStringValue("unitPrice", UnitPrice);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
