// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// List of groups
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class GroupOneDto : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents group one amount</summary>
        public double? Amount { get; set; }
        /// <summary>Represents list of children groups</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.GroupOneDto>? Children { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.GroupOneDto> Children { get; set; }
#endif
        /// <summary>Represents client name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientName { get; set; }
#nullable restore
#else
        public string ClientName { get; set; }
#endif
        /// <summary>Represents list of days</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.DailyTotalDto>? Days { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.DailyTotalDto> Days { get; set; }
#endif
        /// <summary>Represents duration</summary>
        public double? Duration { get; set; }
        /// <summary>Represents group one identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represents name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Represents lower case name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameLowerCase { get; set; }
#nullable restore
#else
        public string NameLowerCase { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.GroupOneDto"/> and sets the default values.
        /// </summary>
        public GroupOneDto()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.GroupOneDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.GroupOneDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.GroupOneDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "children", n => { Children = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.GroupOneDto>(global::ClockifyClient.Models.GroupOneDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "clientName", n => { ClientName = n.GetStringValue(); } },
                { "days", n => { Days = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.DailyTotalDto>(global::ClockifyClient.Models.DailyTotalDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "duration", n => { Duration = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nameLowerCase", n => { NameLowerCase = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.GroupOneDto>("children", Children);
            writer.WriteStringValue("clientName", ClientName);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.DailyTotalDto>("days", Days);
            writer.WriteDoubleValue("duration", Duration);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("nameLowerCase", NameLowerCase);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
