// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InvoiceOverviewDtoV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents an invoice amount as long.</summary>
        public long? Amount { get; set; }
        /// <summary>Represents an invoice balance amount as long.</summary>
        public long? Balance { get; set; }
        /// <summary>Represents to whom the invoice should be billed from.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillFrom { get; set; }
#nullable restore
#else
        public string BillFrom { get; set; }
#endif
        /// <summary>Represents client address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientAddress { get; set; }
#nullable restore
#else
        public string ClientAddress { get; set; }
#endif
        /// <summary>Represents client identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>Represents client name for an invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientName { get; set; }
#nullable restore
#else
        public string ClientName { get; set; }
#endif
        /// <summary>Represents company identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyId { get; set; }
#nullable restore
#else
        public string CompanyId { get; set; }
#endif
        /// <summary>Indicates whether invoice contains imported expenses.</summary>
        public bool? ContainsImportedExpenses { get; set; }
        /// <summary>Indicates whether invoice contains imported items.</summary>
        public bool? ContainsImportedTimes { get; set; }
        /// <summary>Represents the currency used by the invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Represents an invoice discount amount as double.</summary>
        public double? Discount { get; set; }
        /// <summary>Represents an invoice discount amount as long.</summary>
        public long? DiscountAmount { get; set; }
        /// <summary>Represents an invoice due date in yyyy-MM-ddThh:mm:ssZ format.</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>Represents invoice identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represents an invoice issued date in yyyy-MM-ddThh:mm:ssZ format.</summary>
        public DateTimeOffset? IssuedDate { get; set; }
        /// <summary>Represents a list of invoice item datatransfer objects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.InvoiceItemDto>? Items { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.InvoiceItemDto> Items { get; set; }
#endif
        /// <summary>Represents an invoice note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>Represents an invoice number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>Represents an invoice paid amount as long.</summary>
        public long? Paid { get; set; }
        /// <summary>Represents the status of an invoice.</summary>
        public global::ClockifyClient.Models.InvoiceOverviewDtoV1_status? Status { get; set; }
        /// <summary>Represents an invoice subject.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>Represents an invoice subtotal as long.</summary>
        public long? Subtotal { get; set; }
        /// <summary>Represents an invoice tax amount as double.</summary>
        public double? Tax { get; set; }
        /// <summary>Represents an invoice tax amount as double.</summary>
        public double? Tax2 { get; set; }
        /// <summary>Represents an invoice tax amount as long.</summary>
        public long? Tax2Amount { get; set; }
        /// <summary>Represents an invoice tax amount as long.</summary>
        public long? TaxAmount { get; set; }
        /// <summary>Represents user identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Represents a list of zero value invoice fields that will be visible.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.VisibleZeroFieldsInvoice? VisibleZeroFields { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.VisibleZeroFieldsInvoice VisibleZeroFields { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.InvoiceOverviewDtoV1"/> and sets the default values.
        /// </summary>
        public InvoiceOverviewDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.InvoiceOverviewDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.InvoiceOverviewDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.InvoiceOverviewDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetLongValue(); } },
                { "balance", n => { Balance = n.GetLongValue(); } },
                { "billFrom", n => { BillFrom = n.GetStringValue(); } },
                { "clientAddress", n => { ClientAddress = n.GetStringValue(); } },
                { "clientId", n => { ClientId = n.GetStringValue(); } },
                { "clientName", n => { ClientName = n.GetStringValue(); } },
                { "companyId", n => { CompanyId = n.GetStringValue(); } },
                { "containsImportedExpenses", n => { ContainsImportedExpenses = n.GetBoolValue(); } },
                { "containsImportedTimes", n => { ContainsImportedTimes = n.GetBoolValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "discount", n => { Discount = n.GetDoubleValue(); } },
                { "discountAmount", n => { DiscountAmount = n.GetLongValue(); } },
                { "dueDate", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issuedDate", n => { IssuedDate = n.GetDateTimeOffsetValue(); } },
                { "items", n => { Items = n.GetCollectionOfObjectValues<global::ClockifyClient.Models.InvoiceItemDto>(global::ClockifyClient.Models.InvoiceItemDto.CreateFromDiscriminatorValue)?.AsList(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "paid", n => { Paid = n.GetLongValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::ClockifyClient.Models.InvoiceOverviewDtoV1_status>(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "subtotal", n => { Subtotal = n.GetLongValue(); } },
                { "tax", n => { Tax = n.GetDoubleValue(); } },
                { "tax2", n => { Tax2 = n.GetDoubleValue(); } },
                { "tax2Amount", n => { Tax2Amount = n.GetLongValue(); } },
                { "taxAmount", n => { TaxAmount = n.GetLongValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "visibleZeroFields", n => { VisibleZeroFields = n.GetObjectValue<global::ClockifyClient.Models.VisibleZeroFieldsInvoice>(global::ClockifyClient.Models.VisibleZeroFieldsInvoice.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("amount", Amount);
            writer.WriteLongValue("balance", Balance);
            writer.WriteStringValue("billFrom", BillFrom);
            writer.WriteStringValue("clientAddress", ClientAddress);
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("clientName", ClientName);
            writer.WriteStringValue("companyId", CompanyId);
            writer.WriteBoolValue("containsImportedExpenses", ContainsImportedExpenses);
            writer.WriteBoolValue("containsImportedTimes", ContainsImportedTimes);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDoubleValue("discount", Discount);
            writer.WriteLongValue("discountAmount", DiscountAmount);
            writer.WriteDateTimeOffsetValue("dueDate", DueDate);
            writer.WriteStringValue("id", Id);
            writer.WriteDateTimeOffsetValue("issuedDate", IssuedDate);
            writer.WriteCollectionOfObjectValues<global::ClockifyClient.Models.InvoiceItemDto>("items", Items);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("number", Number);
            writer.WriteLongValue("paid", Paid);
            writer.WriteEnumValue<global::ClockifyClient.Models.InvoiceOverviewDtoV1_status>("status", Status);
            writer.WriteStringValue("subject", Subject);
            writer.WriteLongValue("subtotal", Subtotal);
            writer.WriteDoubleValue("tax", Tax);
            writer.WriteDoubleValue("tax2", Tax2);
            writer.WriteLongValue("tax2Amount", Tax2Amount);
            writer.WriteLongValue("taxAmount", TaxAmount);
            writer.WriteStringValue("userId", UserId);
            writer.WriteObjectValue<global::ClockifyClient.Models.VisibleZeroFieldsInvoice>("visibleZeroFields", VisibleZeroFields);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
