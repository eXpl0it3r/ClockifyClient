// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpdateHolidayRequestV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Provides automatic time entry creation settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.AutomaticTimeEntryCreationRequest? AutomaticTimeEntryCreation { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.AutomaticTimeEntryCreationRequest AutomaticTimeEntryCreation { get; set; }
#endif
        /// <summary>Provide color in format ^#(?:[0-9a-fA-F]{6}){1}$. Explanation: A valid color code should start with &apos;#&apos; and consist of six hexadecimal characters, representing a color in hexadecimal format. Color value is in standard RGB hexadecimal format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color { get; set; }
#nullable restore
#else
        public string Color { get; set; }
#endif
        /// <summary>Provide startDate and endDate for the holiday.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.DatePeriodRequest? DatePeriod { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.DatePeriodRequest DatePeriod { get; set; }
#endif
        /// <summary>Indicates whether the holiday is shown to new users.</summary>
        public bool? EveryoneIncludingNew { get; set; }
        /// <summary>Provide the name you would like to use for updating the holiday.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Indicates whether the holiday occurs annually.</summary>
        public bool? OccursAnnually { get; set; }
        /// <summary>Provide list with user group ids and corresponding status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsUserGroupFilterRequest? UserGroups { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsUserGroupFilterRequest UserGroups { get; set; }
#endif
        /// <summary>Provide list with users ids and corresponding status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsUsersFilterRequestForHoliday? Users { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsUsersFilterRequestForHoliday Users { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.UpdateHolidayRequestV1"/> and sets the default values.
        /// </summary>
        public UpdateHolidayRequestV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.UpdateHolidayRequestV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.UpdateHolidayRequestV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.UpdateHolidayRequestV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "automaticTimeEntryCreation", n => { AutomaticTimeEntryCreation = n.GetObjectValue<global::ClockifyClient.Models.AutomaticTimeEntryCreationRequest>(global::ClockifyClient.Models.AutomaticTimeEntryCreationRequest.CreateFromDiscriminatorValue); } },
                { "color", n => { Color = n.GetStringValue(); } },
                { "datePeriod", n => { DatePeriod = n.GetObjectValue<global::ClockifyClient.Models.DatePeriodRequest>(global::ClockifyClient.Models.DatePeriodRequest.CreateFromDiscriminatorValue); } },
                { "everyoneIncludingNew", n => { EveryoneIncludingNew = n.GetBoolValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "occursAnnually", n => { OccursAnnually = n.GetBoolValue(); } },
                { "userGroups", n => { UserGroups = n.GetObjectValue<global::ClockifyClient.Models.ContainsUserGroupFilterRequest>(global::ClockifyClient.Models.ContainsUserGroupFilterRequest.CreateFromDiscriminatorValue); } },
                { "users", n => { Users = n.GetObjectValue<global::ClockifyClient.Models.ContainsUsersFilterRequestForHoliday>(global::ClockifyClient.Models.ContainsUsersFilterRequestForHoliday.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ClockifyClient.Models.AutomaticTimeEntryCreationRequest>("automaticTimeEntryCreation", AutomaticTimeEntryCreation);
            writer.WriteStringValue("color", Color);
            writer.WriteObjectValue<global::ClockifyClient.Models.DatePeriodRequest>("datePeriod", DatePeriod);
            writer.WriteBoolValue("everyoneIncludingNew", EveryoneIncludingNew);
            writer.WriteStringValue("name", Name);
            writer.WriteBoolValue("occursAnnually", OccursAnnually);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsUserGroupFilterRequest>("userGroups", UserGroups);
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsUsersFilterRequestForHoliday>("users", Users);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
