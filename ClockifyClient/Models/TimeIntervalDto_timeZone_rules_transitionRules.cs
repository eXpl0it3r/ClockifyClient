// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TimeIntervalDto_timeZone_rules_transitionRules : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The dayOfMonthIndicator property</summary>
        public int? DayOfMonthIndicator { get; set; }
        /// <summary>The dayOfWeek property</summary>
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_dayOfWeek? DayOfWeek { get; set; }
        /// <summary>The localTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.LocalTime? LocalTime { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.LocalTime LocalTime { get; set; }
#endif
        /// <summary>The midnightEndOfDay property</summary>
        public bool? MidnightEndOfDay { get; set; }
        /// <summary>The month property</summary>
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_month? Month { get; set; }
        /// <summary>The offsetAfter property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetAfter? OffsetAfter { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetAfter OffsetAfter { get; set; }
#endif
        /// <summary>The offsetBefore property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetBefore? OffsetBefore { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetBefore OffsetBefore { get; set; }
#endif
        /// <summary>The standardOffset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_standardOffset? StandardOffset { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_standardOffset StandardOffset { get; set; }
#endif
        /// <summary>The timeDefinition property</summary>
        public global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_timeDefinition? TimeDefinition { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules"/> and sets the default values.
        /// </summary>
        public TimeIntervalDto_timeZone_rules_transitionRules()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "dayOfMonthIndicator", n => { DayOfMonthIndicator = n.GetIntValue(); } },
                { "dayOfWeek", n => { DayOfWeek = n.GetEnumValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_dayOfWeek>(); } },
                { "localTime", n => { LocalTime = n.GetObjectValue<global::ClockifyClient.Models.LocalTime>(global::ClockifyClient.Models.LocalTime.CreateFromDiscriminatorValue); } },
                { "midnightEndOfDay", n => { MidnightEndOfDay = n.GetBoolValue(); } },
                { "month", n => { Month = n.GetEnumValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_month>(); } },
                { "offsetAfter", n => { OffsetAfter = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetAfter>(global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetAfter.CreateFromDiscriminatorValue); } },
                { "offsetBefore", n => { OffsetBefore = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetBefore>(global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetBefore.CreateFromDiscriminatorValue); } },
                { "standardOffset", n => { StandardOffset = n.GetObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_standardOffset>(global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_standardOffset.CreateFromDiscriminatorValue); } },
                { "timeDefinition", n => { TimeDefinition = n.GetEnumValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_timeDefinition>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("dayOfMonthIndicator", DayOfMonthIndicator);
            writer.WriteEnumValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_dayOfWeek>("dayOfWeek", DayOfWeek);
            writer.WriteObjectValue<global::ClockifyClient.Models.LocalTime>("localTime", LocalTime);
            writer.WriteBoolValue("midnightEndOfDay", MidnightEndOfDay);
            writer.WriteEnumValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_month>("month", Month);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetAfter>("offsetAfter", OffsetAfter);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_offsetBefore>("offsetBefore", OffsetBefore);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_standardOffset>("standardOffset", StandardOffset);
            writer.WriteEnumValue<global::ClockifyClient.Models.TimeIntervalDto_timeZone_rules_transitionRules_timeDefinition>("timeDefinition", TimeDefinition);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
