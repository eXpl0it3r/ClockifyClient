// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represent the list of balances.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BalanceDtoV1 : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents the balance amount of the time unit</summary>
        public double? Balance { get; set; }
        /// <summary>Represent balance identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Represent negative balance amount.</summary>
        public double? NegativeBalanceAmount { get; set; }
        /// <summary>Indicates whether the negative balance limit is allowed.</summary>
        public bool? NegativeBalanceLimit { get; set; }
        /// <summary>Indicates whether the policy is archived.</summary>
        public bool? PolicyArchived { get; set; }
        /// <summary>Represent policy identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PolicyId { get; set; }
#nullable restore
#else
        public string PolicyId { get; set; }
#endif
        /// <summary>Represent policy name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PolicyName { get; set; }
#nullable restore
#else
        public string PolicyName { get; set; }
#endif
        /// <summary>Represent policy time unit.</summary>
        public global::ClockifyClient.Models.BalanceDtoV1_policyTimeUnit? PolicyTimeUnit { get; set; }
        /// <summary>Represents the total amount</summary>
        public double? Total { get; set; }
        /// <summary>Represents the balance used amount</summary>
        public double? Used { get; set; }
        /// <summary>Represent user identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>Represent user&apos;s username.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>Represent workspace identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkspaceId { get; set; }
#nullable restore
#else
        public string WorkspaceId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.BalanceDtoV1"/> and sets the default values.
        /// </summary>
        public BalanceDtoV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.BalanceDtoV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.BalanceDtoV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.BalanceDtoV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "balance", n => { Balance = n.GetDoubleValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "negativeBalanceAmount", n => { NegativeBalanceAmount = n.GetDoubleValue(); } },
                { "negativeBalanceLimit", n => { NegativeBalanceLimit = n.GetBoolValue(); } },
                { "policyArchived", n => { PolicyArchived = n.GetBoolValue(); } },
                { "policyId", n => { PolicyId = n.GetStringValue(); } },
                { "policyName", n => { PolicyName = n.GetStringValue(); } },
                { "policyTimeUnit", n => { PolicyTimeUnit = n.GetEnumValue<global::ClockifyClient.Models.BalanceDtoV1_policyTimeUnit>(); } },
                { "total", n => { Total = n.GetDoubleValue(); } },
                { "used", n => { Used = n.GetDoubleValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
                { "workspaceId", n => { WorkspaceId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("balance", Balance);
            writer.WriteStringValue("id", Id);
            writer.WriteDoubleValue("negativeBalanceAmount", NegativeBalanceAmount);
            writer.WriteBoolValue("negativeBalanceLimit", NegativeBalanceLimit);
            writer.WriteBoolValue("policyArchived", PolicyArchived);
            writer.WriteStringValue("policyId", PolicyId);
            writer.WriteStringValue("policyName", PolicyName);
            writer.WriteEnumValue<global::ClockifyClient.Models.BalanceDtoV1_policyTimeUnit>("policyTimeUnit", PolicyTimeUnit);
            writer.WriteDoubleValue("total", Total);
            writer.WriteDoubleValue("used", Used);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userName", UserName);
            writer.WriteStringValue("workspaceId", WorkspaceId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
