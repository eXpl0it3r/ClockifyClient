// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Represents a feature subscription type enum.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FeatureSubscriptionType : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The BASIC_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_BASIC_2021? BASIC2021 { get; set; }
        /// <summary>The BASIC_YEAR_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_BASIC_YEAR_2021? BASICYEAR2021 { get; set; }
        /// <summary>The BUNDLE_2024 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_BUNDLE_2024? BUNDLE2024 { get; set; }
        /// <summary>The BUNDLE_YEAR_2024 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_BUNDLE_YEAR_2024? BUNDLEYEAR2024 { get; set; }
        /// <summary>The ENTERPRISE property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE? ENTERPRISE { get; set; }
        /// <summary>The ENTERPRISE_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_2021? ENTERPRISE2021 { get; set; }
        /// <summary>The ENTERPRISE_YEAR property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_YEAR? ENTERPRISEYEAR { get; set; }
        /// <summary>The ENTERPRISE_YEAR_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_YEAR_2021? ENTERPRISEYEAR2021 { get; set; }
        /// <summary>The featurePermissions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.FeatureSubscriptionType_featurePermissions?>? FeaturePermissions { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.FeatureSubscriptionType_featurePermissions?> FeaturePermissions { get; set; }
#endif
        /// <summary>The FREE property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_FREE? FREE { get; set; }
        /// <summary>The legacy property</summary>
        public bool? Legacy { get; set; }
        /// <summary>The PREMIUM property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_PREMIUM? PREMIUM { get; set; }
        /// <summary>The PREMIUM_YEAR property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_PREMIUM_YEAR? PREMIUMYEAR { get; set; }
        /// <summary>The PRO_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_PRO_2021? PRO2021 { get; set; }
        /// <summary>The PRO_YEAR_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_PRO_YEAR_2021? PROYEAR2021 { get; set; }
        /// <summary>The regionalAllowed property</summary>
        public bool? RegionalAllowed { get; set; }
        /// <summary>The SELF_HOSTED property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_SELF_HOSTED? SELFHOSTED { get; set; }
        /// <summary>The SPECIAL property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_SPECIAL? SPECIAL { get; set; }
        /// <summary>The SPECIAL_YEAR property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_SPECIAL_YEAR? SPECIALYEAR { get; set; }
        /// <summary>The STANDARD_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_STANDARD_2021? STANDARD2021 { get; set; }
        /// <summary>The STANDARD_YEAR_2021 property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_STANDARD_YEAR_2021? STANDARDYEAR2021 { get; set; }
        /// <summary>The TRIAL property</summary>
        public global::ClockifyClient.Models.FeatureSubscriptionType_TRIAL? TRIAL { get; set; }
        /// <summary>The weight property</summary>
        public int? Weight { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.FeatureSubscriptionType"/> and sets the default values.
        /// </summary>
        public FeatureSubscriptionType()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.FeatureSubscriptionType"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.FeatureSubscriptionType CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.FeatureSubscriptionType();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "BASIC_2021", n => { BASIC2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BASIC_2021>(); } },
                { "BASIC_YEAR_2021", n => { BASICYEAR2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BASIC_YEAR_2021>(); } },
                { "BUNDLE_2024", n => { BUNDLE2024 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BUNDLE_2024>(); } },
                { "BUNDLE_YEAR_2024", n => { BUNDLEYEAR2024 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BUNDLE_YEAR_2024>(); } },
                { "ENTERPRISE", n => { ENTERPRISE = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE>(); } },
                { "ENTERPRISE_2021", n => { ENTERPRISE2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_2021>(); } },
                { "ENTERPRISE_YEAR", n => { ENTERPRISEYEAR = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_YEAR>(); } },
                { "ENTERPRISE_YEAR_2021", n => { ENTERPRISEYEAR2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_YEAR_2021>(); } },
                { "FREE", n => { FREE = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_FREE>(); } },
                { "featurePermissions", n => { FeaturePermissions = n.GetCollectionOfEnumValues<global::ClockifyClient.Models.FeatureSubscriptionType_featurePermissions>()?.AsList(); } },
                { "legacy", n => { Legacy = n.GetBoolValue(); } },
                { "PREMIUM", n => { PREMIUM = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PREMIUM>(); } },
                { "PREMIUM_YEAR", n => { PREMIUMYEAR = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PREMIUM_YEAR>(); } },
                { "PRO_2021", n => { PRO2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PRO_2021>(); } },
                { "PRO_YEAR_2021", n => { PROYEAR2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PRO_YEAR_2021>(); } },
                { "regionalAllowed", n => { RegionalAllowed = n.GetBoolValue(); } },
                { "SELF_HOSTED", n => { SELFHOSTED = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_SELF_HOSTED>(); } },
                { "SPECIAL", n => { SPECIAL = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_SPECIAL>(); } },
                { "SPECIAL_YEAR", n => { SPECIALYEAR = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_SPECIAL_YEAR>(); } },
                { "STANDARD_2021", n => { STANDARD2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_STANDARD_2021>(); } },
                { "STANDARD_YEAR_2021", n => { STANDARDYEAR2021 = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_STANDARD_YEAR_2021>(); } },
                { "TRIAL", n => { TRIAL = n.GetEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_TRIAL>(); } },
                { "weight", n => { Weight = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BASIC_2021>("BASIC_2021", BASIC2021);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BASIC_YEAR_2021>("BASIC_YEAR_2021", BASICYEAR2021);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BUNDLE_2024>("BUNDLE_2024", BUNDLE2024);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_BUNDLE_YEAR_2024>("BUNDLE_YEAR_2024", BUNDLEYEAR2024);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE>("ENTERPRISE", ENTERPRISE);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_2021>("ENTERPRISE_2021", ENTERPRISE2021);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_YEAR>("ENTERPRISE_YEAR", ENTERPRISEYEAR);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_ENTERPRISE_YEAR_2021>("ENTERPRISE_YEAR_2021", ENTERPRISEYEAR2021);
            writer.WriteCollectionOfEnumValues<global::ClockifyClient.Models.FeatureSubscriptionType_featurePermissions>("featurePermissions", FeaturePermissions);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_FREE>("FREE", FREE);
            writer.WriteBoolValue("legacy", Legacy);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PREMIUM>("PREMIUM", PREMIUM);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PREMIUM_YEAR>("PREMIUM_YEAR", PREMIUMYEAR);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PRO_2021>("PRO_2021", PRO2021);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_PRO_YEAR_2021>("PRO_YEAR_2021", PROYEAR2021);
            writer.WriteBoolValue("regionalAllowed", RegionalAllowed);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_SELF_HOSTED>("SELF_HOSTED", SELFHOSTED);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_SPECIAL>("SPECIAL", SPECIAL);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_SPECIAL_YEAR>("SPECIAL_YEAR", SPECIALYEAR);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_STANDARD_2021>("STANDARD_2021", STANDARD2021);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_STANDARD_YEAR_2021>("STANDARD_YEAR_2021", STANDARDYEAR2021);
            writer.WriteEnumValue<global::ClockifyClient.Models.FeatureSubscriptionType_TRIAL>("TRIAL", TRIAL);
            writer.WriteIntValue("weight", Weight);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
