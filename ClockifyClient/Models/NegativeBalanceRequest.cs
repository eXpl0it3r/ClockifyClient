// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    /// <summary>
    /// Provide the negative balance data you would like to use for updating the policy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class NegativeBalanceRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents negative balance amount.</summary>
        public double? Amount { get; set; }
        /// <summary>The amountValidForTimeUnit property</summary>
        public bool? AmountValidForTimeUnit { get; set; }
        /// <summary>Represents negative balance period.</summary>
        public global::ClockifyClient.Models.NegativeBalanceRequest_period? Period { get; set; }
        /// <summary>Represents negative balance time unit.</summary>
        public global::ClockifyClient.Models.NegativeBalanceRequest_timeUnit? TimeUnit { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.NegativeBalanceRequest"/> and sets the default values.
        /// </summary>
        public NegativeBalanceRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.NegativeBalanceRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.NegativeBalanceRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.NegativeBalanceRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "amountValidForTimeUnit", n => { AmountValidForTimeUnit = n.GetBoolValue(); } },
                { "period", n => { Period = n.GetEnumValue<global::ClockifyClient.Models.NegativeBalanceRequest_period>(); } },
                { "timeUnit", n => { TimeUnit = n.GetEnumValue<global::ClockifyClient.Models.NegativeBalanceRequest_timeUnit>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteBoolValue("amountValidForTimeUnit", AmountValidForTimeUnit);
            writer.WriteEnumValue<global::ClockifyClient.Models.NegativeBalanceRequest_period>("period", Period);
            writer.WriteEnumValue<global::ClockifyClient.Models.NegativeBalanceRequest_timeUnit>("timeUnit", TimeUnit);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
