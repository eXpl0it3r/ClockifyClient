// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InvoiceFilterRequestV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents a client filter object. If provided, you&apos;ll get a filtered list of invoices that matches the specified client filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.ContainsArchivedFilterRequest? Clients { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.ContainsArchivedFilterRequest Clients { get; set; }
#endif
        /// <summary>Represents a company filter object. If provided, you&apos;ll get a filtered list of invoices that matches the specified company filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.BaseFilterRequest? Companies { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.BaseFilterRequest Companies { get; set; }
#endif
        /// <summary>Represents an invoice amount. If provided, you&apos;ll get a filtered list of invoices that has the equal amount as specified.</summary>
        public long? ExactAmount { get; set; }
        /// <summary>Represents an invoice balance. If provided, you&apos;ll get a filtered list of invoices that has the equal balance as specified.</summary>
        public long? ExactBalance { get; set; }
        /// <summary>Represents an invoice amount. If provided, you&apos;ll get a filtered list of invoices that has amount greater than specified.</summary>
        public long? GreaterThanAmount { get; set; }
        /// <summary>Represents an invoice balance. If provided, you&apos;ll get a filtered list of invoices that has balance greater than specified.</summary>
        public long? GreaterThanBalance { get; set; }
        /// <summary>If provided, you&apos;ll get a filtered list of invoices that contain the provided string in their invoice number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceNumber { get; set; }
#nullable restore
#else
        public string InvoiceNumber { get; set; }
#endif
        /// <summary>Represents a time range object. If provided, you&apos;ll get a filtered list of invoices that has issue date within the time range specified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TimeRangeRequestDtoV1? IssueDate { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TimeRangeRequestDtoV1 IssueDate { get; set; }
#endif
        /// <summary>Represents an invoice amount. If provided, you&apos;ll get a filtered list of invoices that has amount less than specified.</summary>
        public long? LessThanAmount { get; set; }
        /// <summary>Represents an invoice balance. If provided, you&apos;ll get a filtered list of invoices that has balance less than specified.</summary>
        public long? LessThanBalance { get; set; }
        /// <summary>Page number.</summary>
        public int? Page { get; set; }
        /// <summary>Page size.</summary>
        public int? PageSize { get; set; }
        /// <summary>Represents the column name to be used as sorting criteria.</summary>
        public global::ClockifyClient.Models.InvoiceFilterRequestV1_sortColumn? SortColumn { get; set; }
        /// <summary>Represents the sorting order.</summary>
        public global::ClockifyClient.Models.InvoiceFilterRequestV1_sortOrder? SortOrder { get; set; }
        /// <summary>Represents a list of invoice statuses. If provided, you&apos;ll get a filtered list of invoices that matches any of the invoice status provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::ClockifyClient.Models.InvoiceFilterRequestV1_statuses?>? Statuses { get; set; }
#nullable restore
#else
        public List<global::ClockifyClient.Models.InvoiceFilterRequestV1_statuses?> Statuses { get; set; }
#endif
        /// <summary>Flag to toggle on/off strict search mode. When set to true, search by invoice number only will return invoices whose number exactly matches the string value given for the &apos;invoiceNumber&apos; parameter. When set to false, results will also include invoices whose number contain the string value, but could be longer than the string value itself. For example, if there is an invoice with the number &apos;123456&apos;, and the search value is &apos;123&apos;, setting strict-name-search to true will not return that invoice in the results, whereas setting it to false will.</summary>
        public bool? StrictSearch { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.InvoiceFilterRequestV1"/> and sets the default values.
        /// </summary>
        public InvoiceFilterRequestV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.InvoiceFilterRequestV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.InvoiceFilterRequestV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.InvoiceFilterRequestV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "clients", n => { Clients = n.GetObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterRequest>(global::ClockifyClient.Models.ContainsArchivedFilterRequest.CreateFromDiscriminatorValue); } },
                { "companies", n => { Companies = n.GetObjectValue<global::ClockifyClient.Models.BaseFilterRequest>(global::ClockifyClient.Models.BaseFilterRequest.CreateFromDiscriminatorValue); } },
                { "exactAmount", n => { ExactAmount = n.GetLongValue(); } },
                { "exactBalance", n => { ExactBalance = n.GetLongValue(); } },
                { "greaterThanAmount", n => { GreaterThanAmount = n.GetLongValue(); } },
                { "greaterThanBalance", n => { GreaterThanBalance = n.GetLongValue(); } },
                { "invoiceNumber", n => { InvoiceNumber = n.GetStringValue(); } },
                { "issueDate", n => { IssueDate = n.GetObjectValue<global::ClockifyClient.Models.TimeRangeRequestDtoV1>(global::ClockifyClient.Models.TimeRangeRequestDtoV1.CreateFromDiscriminatorValue); } },
                { "lessThanAmount", n => { LessThanAmount = n.GetLongValue(); } },
                { "lessThanBalance", n => { LessThanBalance = n.GetLongValue(); } },
                { "page", n => { Page = n.GetIntValue(); } },
                { "pageSize", n => { PageSize = n.GetIntValue(); } },
                { "sortColumn", n => { SortColumn = n.GetEnumValue<global::ClockifyClient.Models.InvoiceFilterRequestV1_sortColumn>(); } },
                { "sortOrder", n => { SortOrder = n.GetEnumValue<global::ClockifyClient.Models.InvoiceFilterRequestV1_sortOrder>(); } },
                { "statuses", n => { Statuses = n.GetCollectionOfEnumValues<global::ClockifyClient.Models.InvoiceFilterRequestV1_statuses>()?.AsList(); } },
                { "strictSearch", n => { StrictSearch = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::ClockifyClient.Models.ContainsArchivedFilterRequest>("clients", Clients);
            writer.WriteObjectValue<global::ClockifyClient.Models.BaseFilterRequest>("companies", Companies);
            writer.WriteLongValue("exactAmount", ExactAmount);
            writer.WriteLongValue("exactBalance", ExactBalance);
            writer.WriteLongValue("greaterThanAmount", GreaterThanAmount);
            writer.WriteLongValue("greaterThanBalance", GreaterThanBalance);
            writer.WriteStringValue("invoiceNumber", InvoiceNumber);
            writer.WriteObjectValue<global::ClockifyClient.Models.TimeRangeRequestDtoV1>("issueDate", IssueDate);
            writer.WriteLongValue("lessThanAmount", LessThanAmount);
            writer.WriteLongValue("lessThanBalance", LessThanBalance);
            writer.WriteIntValue("page", Page);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteEnumValue<global::ClockifyClient.Models.InvoiceFilterRequestV1_sortColumn>("sortColumn", SortColumn);
            writer.WriteEnumValue<global::ClockifyClient.Models.InvoiceFilterRequestV1_sortOrder>("sortOrder", SortOrder);
            writer.WriteCollectionOfEnumValues<global::ClockifyClient.Models.InvoiceFilterRequestV1_statuses>("statuses", Statuses);
            writer.WriteBoolValue("strictSearch", StrictSearch);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
