// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace ClockifyClient.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class UpdateInvoiceRequestV1 : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents client identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>Represents company identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyId { get; set; }
#nullable restore
#else
        public string CompanyId { get; set; }
#endif
        /// <summary>Represents the currency used by the invoice.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Represents an invoice discount percent as double.</summary>
        public double? DiscountPercent { get; set; }
        /// <summary>Represents an invoice due date in yyyy-MM-ddThh:mm:ssZ format.</summary>
        public DateTimeOffset? DueDate { get; set; }
        /// <summary>Represents an invoice issued date in yyyy-MM-ddThh:mm:ssZ format.</summary>
        public DateTimeOffset? IssuedDate { get; set; }
        /// <summary>Represents an invoice note.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>Represents an invoice number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>Represents an invoice subject.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>Represents an invoice tax 2 percent as double.</summary>
        public double? Tax2Percent { get; set; }
        /// <summary>Represents an invoice tax percent as double.</summary>
        public double? TaxPercent { get; set; }
        /// <summary>Represents an invoice taxation type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::ClockifyClient.Models.TaxType? TaxType { get; set; }
#nullable restore
#else
        public global::ClockifyClient.Models.TaxType TaxType { get; set; }
#endif
        /// <summary>Represents a list of zero value invoice fields that will be visible.</summary>
        public global::ClockifyClient.Models.UpdateInvoiceRequestV1_visibleZeroFields? VisibleZeroFields { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.Models.UpdateInvoiceRequestV1"/> and sets the default values.
        /// </summary>
        public UpdateInvoiceRequestV1()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.UpdateInvoiceRequestV1"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::ClockifyClient.Models.UpdateInvoiceRequestV1 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            if(ReferenceEquals(parseNode, null)) throw new ArgumentNullException(nameof(parseNode));
            return new global::ClockifyClient.Models.UpdateInvoiceRequestV1();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "clientId", n => { ClientId = n.GetStringValue(); } },
                { "companyId", n => { CompanyId = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "discountPercent", n => { DiscountPercent = n.GetDoubleValue(); } },
                { "dueDate", n => { DueDate = n.GetDateTimeOffsetValue(); } },
                { "issuedDate", n => { IssuedDate = n.GetDateTimeOffsetValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "tax2Percent", n => { Tax2Percent = n.GetDoubleValue(); } },
                { "taxPercent", n => { TaxPercent = n.GetDoubleValue(); } },
                { "taxType", n => { TaxType = n.GetObjectValue<global::ClockifyClient.Models.TaxType>(global::ClockifyClient.Models.TaxType.CreateFromDiscriminatorValue); } },
                { "visibleZeroFields", n => { VisibleZeroFields = n.GetEnumValue<global::ClockifyClient.Models.UpdateInvoiceRequestV1_visibleZeroFields>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            if(ReferenceEquals(writer, null)) throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("clientId", ClientId);
            writer.WriteStringValue("companyId", CompanyId);
            writer.WriteStringValue("currency", Currency);
            writer.WriteDoubleValue("discountPercent", DiscountPercent);
            writer.WriteDateTimeOffsetValue("dueDate", DueDate);
            writer.WriteDateTimeOffsetValue("issuedDate", IssuedDate);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("number", Number);
            writer.WriteStringValue("subject", Subject);
            writer.WriteDoubleValue("tax2Percent", Tax2Percent);
            writer.WriteDoubleValue("taxPercent", TaxPercent);
            writer.WriteObjectValue<global::ClockifyClient.Models.TaxType>("taxType", TaxType);
            writer.WriteEnumValue<global::ClockifyClient.Models.UpdateInvoiceRequestV1_visibleZeroFields>("visibleZeroFields", VisibleZeroFields);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
