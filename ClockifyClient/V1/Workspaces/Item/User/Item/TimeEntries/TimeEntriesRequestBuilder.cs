// <auto-generated/>
#pragma warning disable CS0618
using ClockifyClient.Models;
using ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\workspaces\{workspaceId}\user\{userId}\time-entries
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TimeEntriesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the ClockifyClient.v1.workspaces.item.user.item.timeEntries.item collection</summary>
        /// <param name="position">Represents time entry identifier across the system.</param>
        /// <returns>A <see cref="global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.Item.TimeEntriesItemRequestBuilder"/></returns>
        public global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.Item.TimeEntriesItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.Item.TimeEntriesItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TimeEntriesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries?time-entry-ids={time%2Dentry%2Dids}{&description*,end*,from%2Dentry*,get%2Dweek%2Dbefore*,hydrated*,in%2Dprogress*,page*,page%2Dsize*,project*,project%2Drequired*,start*,tags*,task*,task%2Drequired*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TimeEntriesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries?time-entry-ids={time%2Dentry%2Dids}{&description*,end*,from%2Dentry*,get%2Dweek%2Dbefore*,hydrated*,in%2Dprogress*,page*,page%2Dsize*,project*,project%2Drequired*,start*,tags*,task*,task%2Drequired*}", rawUrl)
        {
        }
        /// <summary>
        /// Delete all time entries for user on workspace
        /// </summary>
        /// <returns>A List&lt;global::ClockifyClient.Models.TimeEntryDtoImplV1&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::ClockifyClient.Models.TimeEntryDtoImplV1>?> DeleteAsync(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::ClockifyClient.Models.TimeEntryDtoImplV1>> DeleteAsync(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::ClockifyClient.Models.TimeEntryDtoImplV1>(requestInfo, global::ClockifyClient.Models.TimeEntryDtoImplV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Get time entries for a user on workspace
        /// </summary>
        /// <returns>A List&lt;global::ClockifyClient.Models.TimeEntryWithRatesDtoV1&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::ClockifyClient.Models.TimeEntryWithRatesDtoV1>?> GetAsync(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::ClockifyClient.Models.TimeEntryWithRatesDtoV1>> GetAsync(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::ClockifyClient.Models.TimeEntryWithRatesDtoV1>(requestInfo, global::ClockifyClient.Models.TimeEntryWithRatesDtoV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Stop currently running timer on workspace for user
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeEntryDtoImplV1"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ClockifyClient.Models.TimeEntryDtoImplV1?> PatchAsync(global::ClockifyClient.Models.StopTimeEntryRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ClockifyClient.Models.TimeEntryDtoImplV1> PatchAsync(global::ClockifyClient.Models.StopTimeEntryRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::ClockifyClient.Models.TimeEntryDtoImplV1>(requestInfo, global::ClockifyClient.Models.TimeEntryDtoImplV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Add a new time entry for another user on workspace
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.TimeEntryDtoImplV1"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ClockifyClient.Models.TimeEntryDtoImplV1?> PostAsync(global::ClockifyClient.Models.CreateTimeEntryRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ClockifyClient.Models.TimeEntryDtoImplV1> PostAsync(global::ClockifyClient.Models.CreateTimeEntryRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::ClockifyClient.Models.TimeEntryDtoImplV1>(requestInfo, global::ClockifyClient.Models.TimeEntryDtoImplV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Bulk edit time entries
        /// </summary>
        /// <returns>A List&lt;global::ClockifyClient.Models.TimeEntryDtoV1&gt;</returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::ClockifyClient.Models.TimeEntryDtoV1>?> PutAsync(List<global::ClockifyClient.Models.UpdateTimeEntryBulkRequest> body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::ClockifyClient.Models.TimeEntryDtoV1>> PutAsync(List<global::ClockifyClient.Models.UpdateTimeEntryBulkRequest> body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::ClockifyClient.Models.TimeEntryDtoV1>(requestInfo, global::ClockifyClient.Models.TimeEntryDtoV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Delete all time entries for user on workspace
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries?time-entry-ids={time%2Dentry%2Dids}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Get time entries for a user on workspace
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries{?description*,end*,get%2Dweek%2Dbefore*,hydrated*,in%2Dprogress*,page*,page%2Dsize*,project*,project%2Drequired*,start*,tags*,task*,task%2Drequired*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Stop currently running timer on workspace for user
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::ClockifyClient.Models.StopTimeEntryRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::ClockifyClient.Models.StopTimeEntryRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Add a new time entry for another user on workspace
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::ClockifyClient.Models.CreateTimeEntryRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::ClockifyClient.Models.CreateTimeEntryRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries{?from%2Dentry*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Bulk edit time entries
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(List<global::ClockifyClient.Models.UpdateTimeEntryBulkRequest> body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(List<global::ClockifyClient.Models.UpdateTimeEntryBulkRequest> body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            if(ReferenceEquals(body, null)) throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, "{+baseurl}/v1/workspaces/{workspaceId}/user/{userId}/time-entries{?hydrated*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Delete all time entries for user on workspace
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderDeleteQueryParameters 
        {
            /// <summary>Represents a list of time entry ids to delete.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("time%2Dentry%2Dids")]
            public string[]? TimeEntryIds { get; set; }
#nullable restore
#else
            [QueryParameter("time%2Dentry%2Dids")]
            public string[] TimeEntryIds { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// Get time entries for a user on workspace
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderGetQueryParameters 
        {
            /// <summary>Represents term for searching time entries by description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("description")]
            public string? Description { get; set; }
#nullable restore
#else
            [QueryParameter("description")]
            public string Description { get; set; }
#endif
            /// <summary>Represents end date in yyyy-MM-ddThh:mm:ssZ format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("end")]
            public string? End { get; set; }
#nullable restore
#else
            [QueryParameter("end")]
            public string End { get; set; }
#endif
            /// <summary>Valid yyyy-MM-ddThh:mm:ssZ format date. If provided, filters results within the week before the datetime provided and only those entries with assigned project or task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("get%2Dweek%2Dbefore")]
            public string? GetWeekBefore { get; set; }
#nullable restore
#else
            [QueryParameter("get%2Dweek%2Dbefore")]
            public string GetWeekBefore { get; set; }
#endif
            /// <summary>Flag to set whether to include additional information on time entries or not.</summary>
            [QueryParameter("hydrated")]
            public bool? Hydrated { get; set; }
            /// <summary>Flag to set whether to filter only in progress time entries.</summary>
            [QueryParameter("in%2Dprogress")]
            public bool? InProgress { get; set; }
            /// <summary>Page number.</summary>
            [QueryParameter("page")]
            public int? Page { get; set; }
            /// <summary>Page size.</summary>
            [QueryParameter("page%2Dsize")]
            public int? PageSize { get; set; }
            /// <summary>If provided, you&apos;ll get a filtered list of time entries that matches the provided string in their project id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project")]
            public string? Project { get; set; }
#nullable restore
#else
            [QueryParameter("project")]
            public string Project { get; set; }
#endif
            /// <summary>Flag to set whether to only get time entries which have a project.</summary>
            [QueryParameter("project%2Drequired")]
            public bool? ProjectRequired { get; set; }
            /// <summary>Represents start date in yyyy-MM-ddThh:mm:ssZ format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("start")]
            public string? Start { get; set; }
#nullable restore
#else
            [QueryParameter("start")]
            public string Start { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get a filtered list of time entries that matches the provided string(s) in their tag id(s).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("tags")]
            public string[]? Tags { get; set; }
#nullable restore
#else
            [QueryParameter("tags")]
            public string[] Tags { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get a filtered list of time entries that matches the provided string in their task id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("task")]
            public string? Task { get; set; }
#nullable restore
#else
            [QueryParameter("task")]
            public string Task { get; set; }
#endif
            /// <summary>Flag to set whether to only get time entries which have tasks.</summary>
            [QueryParameter("task%2Drequired")]
            public bool? TaskRequired { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Add a new time entry for another user on workspace
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderPostQueryParameters 
        {
            /// <summary>Represents time entry identifier across the system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("from%2Dentry")]
            public string? FromEntry { get; set; }
#nullable restore
#else
            [QueryParameter("from%2Dentry")]
            public string FromEntry { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderPostRequestConfiguration : RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPostQueryParameters>
        {
        }
        /// <summary>
        /// Bulk edit time entries
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderPutQueryParameters 
        {
            /// <summary>If set to true, results will contain additional information about the time entry.</summary>
            [QueryParameter("hydrated")]
            public bool? Hydrated { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TimeEntriesRequestBuilderPutRequestConfiguration : RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.User.Item.TimeEntries.TimeEntriesRequestBuilder.TimeEntriesRequestBuilderPutQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
