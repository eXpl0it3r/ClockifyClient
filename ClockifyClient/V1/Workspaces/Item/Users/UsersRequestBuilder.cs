// <auto-generated/>
#pragma warning disable CS0618
using ClockifyClient.Models;
using ClockifyClient.V1.Workspaces.Item.Users.Info;
using ClockifyClient.V1.Workspaces.Item.Users.Item;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace ClockifyClient.V1.Workspaces.Item.Users
{
    /// <summary>
    /// Builds and executes requests for operations under \v1\workspaces\{workspaceId}\users
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UsersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The info property</summary>
        public global::ClockifyClient.V1.Workspaces.Item.Users.Info.InfoRequestBuilder Info
        {
            get => new global::ClockifyClient.V1.Workspaces.Item.Users.Info.InfoRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the ClockifyClient.v1.workspaces.item.users.item collection</summary>
        /// <param name="position">Represents user identifier across the system.</param>
        /// <returns>A <see cref="global::ClockifyClient.V1.Workspaces.Item.Users.Item.WithUserItemRequestBuilder"/></returns>
        public global::ClockifyClient.V1.Workspaces.Item.Users.Item.WithUserItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("userId", position);
                return new global::ClockifyClient.V1.Workspaces.Item.Users.Item.WithUserItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/workspaces/{workspaceId}/users?include-roles={include%2Droles}&send-email={send%2Demail}{&account%2Dstatuses*,email*,memberships*,name*,page*,page%2Dsize*,project%2Did*,sort%2Dcolumn*,sort%2Dorder*,status*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public UsersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v1/workspaces/{workspaceId}/users?include-roles={include%2Droles}&send-email={send%2Demail}{&account%2Dstatuses*,email*,memberships*,name*,page*,page%2Dsize*,project%2Did*,sort%2Dcolumn*,sort%2Dorder*,status*}", rawUrl)
        {
        }
        /// <summary>
        /// Find all users on workspace
        /// </summary>
        /// <returns>A List&lt;global::ClockifyClient.Models.UserDtoV1&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::ClockifyClient.Models.UserDtoV1>?> GetAsync(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::ClockifyClient.Models.UserDtoV1>> GetAsync(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::ClockifyClient.Models.UserDtoV1>(requestInfo, global::ClockifyClient.Models.UserDtoV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// You can add users to a workspace via API only if that workspace has a paid subscription. If the workspace has a paid subscription, you can add as many users as you want but you are limited by the number of paid user seats on that workspace.
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.Models.WorkspaceDtoV1"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::ClockifyClient.Models.WorkspaceDtoV1?> PostAsync(global::ClockifyClient.Models.AddUserToWorkspaceRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::ClockifyClient.Models.WorkspaceDtoV1> PostAsync(global::ClockifyClient.Models.AddUserToWorkspaceRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::ClockifyClient.Models.WorkspaceDtoV1>(requestInfo, global::ClockifyClient.Models.WorkspaceDtoV1.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Find all users on workspace
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, "{+baseurl}/v1/workspaces/{workspaceId}/users?include-roles={include%2Droles}{&account%2Dstatuses*,email*,memberships*,name*,page*,page%2Dsize*,project%2Did*,sort%2Dcolumn*,sort%2Dorder*,status*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// You can add users to a workspace via API only if that workspace has a paid subscription. If the workspace has a paid subscription, you can add as many users as you want but you are limited by the number of paid user seats on that workspace.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::ClockifyClient.Models.AddUserToWorkspaceRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::ClockifyClient.Models.AddUserToWorkspaceRequest body, Action<RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/v1/workspaces/{workspaceId}/users?send-email={send%2Demail}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Find all users on workspace
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetQueryParameters 
        {
            /// <summary>If provided, you&apos;ll get a filtered list of users with the corresponding account status filter. If not, this will only filter ACTIVE, PENDING_EMAIL_VERIFICATION, and NOT_REGISTERED Users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("account%2Dstatuses")]
            public string? AccountStatuses { get; set; }
#nullable restore
#else
            [QueryParameter("account%2Dstatuses")]
            public string AccountStatuses { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get a filtered list of users that contain the provided string in their email address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("email")]
            public string? Email { get; set; }
#nullable restore
#else
            [QueryParameter("email")]
            public string Email { get; set; }
#endif
            /// <summary>If you pass along includeRoles=true, you&apos;ll get each user&apos;s detailed manager role (including projects and members which they manage)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("include%2Droles")]
            public string? IncludeRoles { get; set; }
#nullable restore
#else
            [QueryParameter("include%2Droles")]
            public string IncludeRoles { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get all users along with workspaces, groups, or projects they have access to. Default value is NONE.</summary>
            [Obsolete("This property is deprecated, use MembershipsAsGetMembershipsQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("memberships")]
            public string? Memberships { get; set; }
#nullable restore
#else
            [QueryParameter("memberships")]
            public string Memberships { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get all users along with workspaces, groups, or projects they have access to. Default value is NONE.</summary>
            [QueryParameter("memberships")]
            public global::ClockifyClient.V1.Workspaces.Item.Users.GetMembershipsQueryParameterType? MembershipsAsGetMembershipsQueryParameterType { get; set; }
            /// <summary>If provided, you&apos;ll get a filtered list of users that contain the provided string in their name</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("name")]
            public string? Name { get; set; }
#nullable restore
#else
            [QueryParameter("name")]
            public string Name { get; set; }
#endif
            /// <summary>Page number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page")]
            public string? Page { get; set; }
#nullable restore
#else
            [QueryParameter("page")]
            public string Page { get; set; }
#endif
            /// <summary>Page size.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("page%2Dsize")]
            public string? PageSize { get; set; }
#nullable restore
#else
            [QueryParameter("page%2Dsize")]
            public string PageSize { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get a list of users that have access to the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("project%2Did")]
            public string? ProjectId { get; set; }
#nullable restore
#else
            [QueryParameter("project%2Did")]
            public string ProjectId { get; set; }
#endif
            /// <summary>Sorting column criteria. Default value: EMAIL</summary>
            [Obsolete("This property is deprecated, use SortColumnAsGetSortColumnQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort%2Dcolumn")]
            public string? SortColumn { get; set; }
#nullable restore
#else
            [QueryParameter("sort%2Dcolumn")]
            public string SortColumn { get; set; }
#endif
            /// <summary>Sorting column criteria. Default value: EMAIL</summary>
            [QueryParameter("sort%2Dcolumn")]
            public global::ClockifyClient.V1.Workspaces.Item.Users.GetSortColumnQueryParameterType? SortColumnAsGetSortColumnQueryParameterType { get; set; }
            /// <summary>Sorting mode. Default value: ASCENDING</summary>
            [Obsolete("This property is deprecated, use SortOrderAsGetSortOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort%2Dorder")]
            public string? SortOrder { get; set; }
#nullable restore
#else
            [QueryParameter("sort%2Dorder")]
            public string SortOrder { get; set; }
#endif
            /// <summary>Sorting mode. Default value: ASCENDING</summary>
            [QueryParameter("sort%2Dorder")]
            public global::ClockifyClient.V1.Workspaces.Item.Users.GetSortOrderQueryParameterType? SortOrderAsGetSortOrderQueryParameterType { get; set; }
            /// <summary>If provided, you&apos;ll get a filtered list of users with the corresponding status.</summary>
            [Obsolete("This property is deprecated, use StatusAsGetStatusQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("status")]
            public string? Status { get; set; }
#nullable restore
#else
            [QueryParameter("status")]
            public string Status { get; set; }
#endif
            /// <summary>If provided, you&apos;ll get a filtered list of users with the corresponding status.</summary>
            [QueryParameter("status")]
            public global::ClockifyClient.V1.Workspaces.Item.Users.GetStatusQueryParameterType? StatusAsGetStatusQueryParameterType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderGetRequestConfiguration : RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// You can add users to a workspace via API only if that workspace has a paid subscription. If the workspace has a paid subscription, you can add as many users as you want but you are limited by the number of paid user seats on that workspace.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderPostQueryParameters 
        {
            /// <summary>Indicates whether to send an email when user is added to the workspace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("send%2Demail")]
            public string? SendEmail { get; set; }
#nullable restore
#else
            [QueryParameter("send%2Demail")]
            public string SendEmail { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class UsersRequestBuilderPostRequestConfiguration : RequestConfiguration<global::ClockifyClient.V1.Workspaces.Item.Users.UsersRequestBuilder.UsersRequestBuilderPostQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
